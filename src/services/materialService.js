import axiosInstance from '../config/axiosInstance';

/**
 * Material Service for handling course materials and file operations
 */
class MaterialService {

  /**
   * Upload a new material
   * @param {FormData} formData - File data with metadata
   * @param {Function} onProgress - Progress callback function
   * @returns {Promise<Object>} Upload result
   */
  static async uploadMaterial(formData, onProgress = null) {
    try {
      // Validate required parameters
      const classroomId = formData.get('classroomId');
      const uploadedBy = formData.get('uploadedBy');
      const file = formData.get('file');
      
      console.log('Debug uploadMaterial params:', { 
        classroomId: typeof classroomId === 'object' ? 'File object' : classroomId,
        uploadedBy,
        hasFile: !!file,
        fileType: file ? file.type : 'N/A',
        fileName: file ? file.name : 'N/A'
      });
      
      // Validate file
      if (!file) {
        throw new Error('No file attached for upload');
      }
      
      // Validate classroom ID
      if (!classroomId) {
        throw new Error('Missing classroomId parameter');
      }
      
      const parsedClassroomId = parseInt(classroomId);
      if (isNaN(parsedClassroomId)) {
        throw new Error(`Invalid classroomId parameter: ${classroomId}`);
      }
      
      // Validate user ID
      if (!uploadedBy) {
        throw new Error('Missing uploadedBy parameter');
      }
      
      const parsedUploadedBy = parseInt(uploadedBy);
      if (isNaN(parsedUploadedBy)) {
        throw new Error(`Invalid uploadedBy parameter: ${uploadedBy}`);
      }
      
      // Ensure values are integers in the FormData
      formData.set('classroomId', parsedClassroomId);
      formData.set('uploadedBy', parsedUploadedBy);
      
      const config = {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      };

      if (onProgress) {
        config.onUploadProgress = (progressEvent) => {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          onProgress(progress);
        };
      }

      console.log('Making API request to upload material');
      const response = await axiosInstance.post('/materials/upload', formData, config);
      console.log('Upload response:', response.data);
      return response.data;
    } catch (error) {
      console.error('Error uploading material:', error);
      if (error.response) {
        console.error('Server error details:', error.response.data);
      }
      throw error;
    }
  }

  /**
   * Get all materials with pagination and filtering
   * @param {Object} params - Query parameters
   * @returns {Promise<Object>} Materials list with pagination
   */
  static async getMaterials(params = {}) {
    try {
      const response = await axiosInstance.get('/materials', { params });
      return response.data;
    } catch (error) {
      console.error('Error fetching materials:', error);
      throw error;
    }
  }

  /**
   * Get material by ID
   * @param {number} materialId - Material ID
   * @returns {Promise<Object>} Material details
   */
  static async getMaterialById(materialId) {
    try {
      const response = await axiosInstance.get(`/materials/${materialId}`);
      return response.data;
    } catch (error) {
      console.error('Error fetching material:', error);
      throw error;
    }
  }

  /**
   * Download a material
   * @param {number} materialId - Material ID
   * @returns {Promise<Blob>} File blob
   */
  static async downloadMaterial(materialId) {
    try {
      console.log(`ƒêang t·∫£i xu·ªëng t√†i li·ªáu ID: ${materialId}`);

      // S·ª≠ d·ª•ng endpoint ch√≠nh x√°c duy nh·∫•t
      const response = await axiosInstance.get(`/materials/download/${materialId}`, {
        responseType: 'blob',
        timeout: 30000 // 30 seconds timeout for downloads
      });

      console.log(`T·∫£i xu·ªëng th√†nh c√¥ng t√†i li·ªáu ID: ${materialId}, k√≠ch th∆∞·ªõc: ${response.data.size} bytes`);

      // Ki·ªÉm tra n·∫øu response l√† blob r·ªóng
      if (!response.data || response.data.size === 0) {
        throw new Error('File t·∫£i xu·ªëng r·ªóng ho·∫∑c kh√¥ng c√≥ n·ªôi dung');
      }

      return response.data;

    } catch (error) {
      console.error('L·ªói t·∫£i xu·ªëng t√†i li·ªáu:', error);

      // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
      if (error.response) {
        const status = error.response.status;
        const errorMessage = error.response.headers['x-error-message'] || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';

        console.error(`HTTP Error ${status}:`, errorMessage);

        switch (status) {
          case 404:
            throw new Error('‚ùå T√†i li·ªáu kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a. Vui l√≤ng li√™n h·ªá gi√°o vi√™n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.');
          case 403:
            throw new Error('üîí B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i li·ªáu n√†y. Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p.');
          case 500:
            throw new Error(`üí• L·ªói server: ${errorMessage}. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n.`);
          case 413:
            throw new Error('üìÅ File qu√° l·ªõn ƒë·ªÉ t·∫£i xu·ªëng. Vui l√≤ng li√™n h·ªá gi√°o vi√™n.');
          case 429:
            throw new Error('‚è∞ Qu√° nhi·ªÅu y√™u c·∫ßu t·∫£i xu·ªëng. Vui l√≤ng ƒë·ª£i m·ªôt ch√∫t r·ªìi th·ª≠ l·∫°i.');
          default:
            throw new Error(`‚ùå L·ªói t·∫£i xu·ªëng (M√£ l·ªói: ${status}): ${errorMessage}`);
        }
      } else if (error.request) {
        console.error('Network error:', error.request);
        throw new Error('üåê Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.');
      } else if (error.code === 'ECONNABORTED') {
        throw new Error('‚è±Ô∏è Qu√° th·ªùi gian ch·ªù t·∫£i xu·ªëng. File c√≥ th·ªÉ qu√° l·ªõn, vui l√≤ng th·ª≠ l·∫°i.');
      } else {
        console.error('Unknown error:', error.message);
        throw new Error(`‚ùì L·ªói kh√¥ng x√°c ƒë·ªãnh: ${error.message}. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.`);
      }
    }
  }

  /**
   * Get materials by course
   * @param {number} courseId - Course ID
   * @param {Object} params - Query parameters
   * @returns {Promise<Array>} Course materials
   */
  static async getMaterialsByCourse(courseId, params = {}) {
    try {
      console.log(`ƒêang l·∫•y danh s√°ch t√†i li·ªáu cho kh√≥a h·ªçc ID: ${courseId}`);

      // S·ª≠ d·ª•ng endpoint ch√≠nh x√°c duy nh·∫•t
      const response = await axiosInstance.get(`/materials/course/${courseId}`, { params });

      console.log(`L·∫•y th√†nh c√¥ng ${response.data.length} t√†i li·ªáu cho kh√≥a h·ªçc ID: ${courseId}`);
      return response.data;

    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch t√†i li·ªáu kh√≥a h·ªçc:', error);

      // X·ª≠ l√Ω l·ªói v√† tr·∫£ v·ªÅ m·∫£ng r·ªóng ƒë·ªÉ tr√°nh crash UI
      if (error.response) {
        const status = error.response.status;
        console.error(`L·ªói HTTP ${status}: ${error.response.data?.message || 'Kh√¥ng x√°c ƒë·ªãnh'}`);
      } else if (error.request) {
        console.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server');
      }

      // Tr·∫£ v·ªÅ m·∫£ng r·ªóng ƒë·ªÉ UI c√≥ th·ªÉ hi·ªÉn th·ªã "Kh√¥ng c√≥ t√†i li·ªáu"
      return [];
    }
  }

  /**
   * Search materials
   * @param {string} query - Search query
   * @param {Object} filters - Additional filters
   * @returns {Promise<Array>} Search results
   */
  static async searchMaterials(query, filters = {}) {
    try {
      const params = { query, ...filters };
      const response = await axiosInstance.get('/materials/search', { params });
      return response.data;
    } catch (error) {
      console.error('Error searching materials:', error);
      throw error;
    }
  }

  /**
   * Update material metadata
   * @param {number} materialId - Material ID
   * @param {Object} updateData - Updated material data
   * @returns {Promise<Object>} Updated material
   */
  static async updateMaterial(materialId, updateData) {
    try {
      const response = await axiosInstance.put(`/materials/${materialId}`, updateData);
      return response.data;
    } catch (error) {
      console.error('Error updating material:', error);
      throw error;
    }
  }

  /**
   * Delete a material
   * @param {number} materialId - Material ID
   * @returns {Promise<Object>} Deletion result
   */
  static async deleteMaterial(materialId) {
    try {
      const response = await axiosInstance.delete(`/materials/${materialId}`);
      return response.data;
    } catch (error) {
      console.error('Error deleting material:', error);
      throw error;
    }
  }

  /**
   * Get material categories
   * @returns {Promise<Array>} List of categories
   */
  static async getCategories() {
    try {
      const response = await axiosInstance.get('/materials/categories');
      return response.data;
    } catch (error) {
      console.error('Error fetching categories:', error);
      throw error;
    }
  }

  /**
   * Create new category
   * @param {Object} categoryData - Category data
   * @returns {Promise<Object>} Created category
   */
  static async createCategory(categoryData) {
    try {
      const response = await axiosInstance.post('/materials/categories', categoryData);
      return response.data;
    } catch (error) {
      console.error('Error creating category:', error);
      throw error;
    }
  }

  /**
   * Get materials by category
   * @param {number} categoryId - Category ID
   * @param {Object} params - Query parameters
   * @returns {Promise<Array>} Materials in category
   */
  static async getMaterialsByCategory(categoryId, params = {}) {
    try {
      const response = await axiosInstance.get(`/materials/category/${categoryId}`, { params });
      return response.data;
    } catch (error) {
      console.error('Error fetching materials by category:', error);
      throw error;
    }
  }

  /**
   * Share material with users
   * @param {number} materialId - Material ID
   * @param {Array} userIds - List of user IDs to share with
   * @returns {Promise<Object>} Share result
   */
  static async shareMaterial(materialId, userIds) {
    try {
      const response = await axiosInstance.post(`/materials/${materialId}/share`, { userIds });
      return response.data;
    } catch (error) {
      console.error('Error sharing material:', error);
      throw error;
    }
  }

  /**
   * Get shared materials for current user
   * @param {Object} params - Query parameters
   * @returns {Promise<Array>} Shared materials
   */
  static async getSharedMaterials(params = {}) {
    try {
      const response = await axiosInstance.get('/materials/shared', { params });
      return response.data;
    } catch (error) {
      console.error('Error fetching shared materials:', error);
      throw error;
    }
  }

  /**
   * Get material usage statistics
   * @param {number} materialId - Material ID
   * @returns {Promise<Object>} Usage statistics
   */
  static async getMaterialStats(materialId) {
    try {
      const response = await axiosInstance.get(`/materials/${materialId}/stats`);
      return response.data;
    } catch (error) {
      console.error('Error fetching material stats:', error);
      throw error;
    }
  }

  /**
   * Create material version (for updates)
   * @param {number} materialId - Original material ID
   * @param {FormData} formData - New version file data
   * @returns {Promise<Object>} New version result
   */
  static async createMaterialVersion(materialId, formData) {
    try {
      const response = await axiosInstance.post(`/materials/${materialId}/versions`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      return response.data;
    } catch (error) {
      console.error('Error creating material version:', error);
      throw error;
    }
  }

  /**
   * Get material versions
   * @param {number} materialId - Material ID
   * @returns {Promise<Array>} List of material versions
   */
  static async getMaterialVersions(materialId) {
    try {
      const response = await axiosInstance.get(`/materials/${materialId}/versions`);
      return response.data;
    } catch (error) {
      console.error('Error fetching material versions:', error);
      throw error;
    }
  }
}

export default MaterialService;
