import React, { useCallback, useEffect, useState } from 'react';
import classManagementService from '../../services/classManagementService';
import {
  debounce,
  formatSchedule,
  getCurrentUserId,
  showConfirmDialog,
  showNotification,
  validateClassForm
} from '../../utils/courseManagementUtils';
import ScheduleManager from '../schedule/ScheduleManager';

const CreateClassModal = ({ visible, template, onCancel, onSuccess }) => {
  const [formData, setFormData] = useState({
    className: '',
    description: '',
    teacherId: null,
    roomId: null,
    educationLevel: '',
    startDate: '',
    endDate: '', 
    schedule: {
      days: [],
      startTime: '07:30',
      endTime: '09:30',
      duration: 120
    },
    maxStudents: 30,
    settings: {
      allowLateEnrollment: true,
      requireApproval: false,
      isPublic: true
    },
    validation: {}
  });

  const [state, setState] = useState({
    teachers: [],
    rooms: [],
    conflicts: [],
    schedule: [],
    scheduleAutoGenerated: false,
    scheduleValidation: null,
    activeStep: 1, // 1: Basic Info, 2: Schedule, 3: Review
    loading: {
      teachers: false,
      rooms: false,
      conflicts: false,
      submit: false
    },
    errors: {}
  });

  // Tự tính ngày kết thúc dự kiến dựa vào số bài học và số buổi/tuần
  const calculateAutoEndDate = (startDateStr, daysPerWeek, templateObj) => {
    if (!startDateStr) return '';
    try {
      const lessonsCount = (templateObj?.lessons?.length || 0) > 0
        ? templateObj.lessons.length
        : (templateObj?.totalWeeks || 0) || 0;
      if (!lessonsCount) return '';
      const sessionsPerWeek = Math.max(1, daysPerWeek || 0);
      const weeksNeeded = Math.ceil(lessonsCount / sessionsPerWeek);
      const start = new Date(startDateStr);
      const end = new Date(start);
      end.setDate(start.getDate() + (weeksNeeded - 1) * 7);
      const yyyy = end.getFullYear();
      const mm = String(end.getMonth() + 1).padStart(2, '0');
      const dd = String(end.getDate()).padStart(2, '0');
      return `${yyyy}-${mm}-${dd}`;
    } catch (e) {
      return '';
    }
  };

  // Re-calc endDate khi startDate hoặc ngày trong tuần thay đổi
  useEffect(() => {
    if (!formData.startDate) return;
    const autoEnd = calculateAutoEndDate(formData.startDate, formData.schedule.days.length, template);
    if (autoEnd && autoEnd !== formData.endDate) {
      setFormData(prev => ({ ...prev, endDate: autoEnd }));
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [formData.startDate, formData.schedule.days.length, template?.totalWeeks, template?.lessons?.length]);

  // Handle schedule change
  const handleScheduleChange = (scheduleItems) => {
    setState(prev => ({ ...prev, schedule: scheduleItems, scheduleAutoGenerated: false }));
  };

  // Handle schedule validation
  const handleScheduleValidate = (validationResult) => {
    setState(prev => ({ ...prev, scheduleValidation: validationResult }));
  };

  // Navigation between steps
  const goToStep = (step) => {
    setState(prev => ({ ...prev, activeStep: step }));
  };

  // Debounced conflict check
  const debouncedConflictCheck = useCallback(
    debounce((data) => {
      checkScheduleConflicts(data);
    }, 1000),
    []
  );

  // Chỉ tải phòng khi mở modal; giáo viên sẽ tải sau khi có đủ lịch + ngày
  useEffect(() => {
    if (visible) {
      loadRooms();
    }
  }, [visible]);

  // Auto-conflict check when relevant fields change
  useEffect(() => {
    if (formData.roomId && formData.schedule.days.length > 0 && formData.startDate && formData.endDate) {
      debouncedConflictCheck({
        roomId: formData.roomId,
        teacherId: formData.teacherId,
        schedule: JSON.stringify(formData.schedule),
        startDate: formData.startDate,
        endDate: formData.endDate
      });
    } else {
      setState(prev => ({ ...prev, conflicts: [] }));
    }
  }, [formData.roomId, formData.teacherId, formData.schedule, formData.startDate, formData.endDate]);

  // Kiểm tra điều kiện đủ để sinh/lọc lịch — khai báo sớm để tránh TDZ
  const isScheduleReady = useCallback(() => {
    return (
      formData.startDate &&
      formData.endDate &&
      formData.schedule?.days?.length > 0 &&
      formData.schedule?.startTime &&
      formData.schedule?.endTime
    );
  }, [formData.startDate, formData.endDate, formData.schedule]);

  // Tạo danh sách tiết học tự động dựa trên lịch tuần ở bước 1
  const generateScheduleFromWeekly = useCallback(() => {
    if (!isScheduleReady()) return [];

    const dayKeyToWeekday = {
      sunday: 0,
      monday: 1,
      tuesday: 2,
      wednesday: 3,
      thursday: 4,
      friday: 5,
      saturday: 6
    };

    const allowedWeekdays = new Set(
      (formData.schedule.days || []).map(d => dayKeyToWeekday[d]).filter(v => v !== undefined)
    );

    const start = new Date(formData.startDate);
    const end = new Date(formData.endDate);
    const msPerDay = 24 * 60 * 60 * 1000;
    const lessons = Array.isArray(template?.lessons) ? template.lessons : [];
    const sessionsPerWeek = Math.max(1, (formData.schedule.days || []).length);
    const fallbackCount = (template?.totalWeeks || 0) * sessionsPerWeek;
    const totalNeeded = lessons.length > 0 ? lessons.length : (template?.lessonCount || fallbackCount || 0);

    const items = [];
    let idx = 0;
    for (let ts = start.getTime(); ts <= end.getTime(); ts += msPerDay) {
      if (totalNeeded && idx >= totalNeeded) break;
      const cur = new Date(ts);
      const weekday = cur.getDay();
      if (!allowedWeekdays.has(weekday)) continue;

      const iso = `${cur.getFullYear()}-${String(cur.getMonth() + 1).padStart(2, '0')}-${String(cur.getDate()).padStart(2, '0')}`;
      const weekIndex = Math.floor((ts - start.getTime()) / (7 * msPerDay)) + 1;
      const lessonName = lessons[idx]?.topicName || `Buổi ${idx + 1}`;

      items.push({
        id: `auto-${idx}`,
        lessonId: lessons[idx]?.id || null,
        lessonName,
        week: weekIndex,
        date: iso,
        startTime: formData.schedule.startTime,
        endTime: formData.schedule.endTime,
        room: null,
        status: 'draft',
        duration: formData.schedule.duration || 120
      });

      idx += 1;
    }

    return items;
  }, [formData.schedule, formData.startDate, formData.endDate, template]);

  // Tự động đổ tiết học sang bước 2 khi người dùng đã chọn lịch ở bước 1
  useEffect(() => {
    if (!visible) return;
    if (!isScheduleReady()) return;
    // Chỉ auto-gen nếu chưa có dữ liệu hoặc dữ liệu này do auto-gen trước đó
    if (state.activeStep <= 2 && (state.schedule.length === 0 || state.scheduleAutoGenerated)) {
      const items = generateScheduleFromWeekly();
      if (items.length > 0) {
        setState(prev => ({ ...prev, schedule: items, scheduleAutoGenerated: true }));
      }
    }
  }, [visible, state.activeStep, isScheduleReady, generateScheduleFromWeekly, state.schedule.length, state.scheduleAutoGenerated]);


  // Tải giáo viên khả dụng theo lịch và môn
  const loadAvailableTeachers = async () => {
    if (!isScheduleReady()) {
      setState(prev => ({ ...prev, teachers: [] }));
      setFormData(prev => ({ ...prev, teacherId: null }));
      return;
    }

    setState(prev => ({ ...prev, loading: { ...prev.loading, teachers: true } }));
    try {
      // Chuẩn hóa subject → lấy từ khóa chính để khớp với department của giáo viên trong BE
      const normalizeSubject = (raw) => {
        if (!raw) return '';
    const s = String(raw).toLowerCase();
        const keywords = ['toán','vật lý','vật lí','hóa','hoá','ngữ văn','tiếng anh','sinh học'];
    const found = keywords.find(k => s.includes(k));
        if (found) return found;
        // fallback: lấy phần trước dấu ' - '
    return s.split(' - ')[0];
      };

      // Chuẩn hóa days → MON/TUE/WED... để BE parse đúng
      const mapDaysForBE = (daysArr) => {
        const map = {
          monday: 'MON', tuesday: 'TUE', wednesday: 'WED', thursday: 'THU', friday: 'FRI', saturday: 'SAT', sunday: 'SUN',
          monday_vi: 'THU 2', tuesday_vi: 'THU 3', wednesday_vi: 'THU 4', thursday_vi: 'THU 5', friday_vi: 'THU 6', saturday_vi: 'THU 7', sunday_vi: 'CHU NHAT'
        };
        return (daysArr || []).map(d => {
          const key = String(d).toLowerCase();
          return map[key] || map[`${key}_vi`] || 'MON';
        });
      };

      const normalizedSchedule = {
        ...formData.schedule,
        days: mapDaysForBE(formData.schedule?.days)
      };

      const payload = {
        subject: normalizeSubject(template.subject || template?.name || ''),
        educationLevel: formData.educationLevel || template?.grade || template?.educationLevel || '',
        schedule: JSON.stringify(normalizedSchedule),
        startDate: formData.startDate,
        endDate: formData.endDate
      };
      const response = await classManagementService.getAvailableTeachers(payload);
      const teachersData = response.data?.data || response.data || [];
      setState(prev => ({
        ...prev,
        teachers: Array.isArray(teachersData) ? teachersData : [],
        loading: { ...prev.loading, teachers: false }
      }));
      // Nếu giáo viên đã chọn không còn trong danh sách mới → reset
      if (formData.teacherId && !teachersData.find?.(t => t.id === formData.teacherId)) {
        setFormData(prev => ({ ...prev, teacherId: null }));
      }
    } catch (error) {
      console.error('Error loading available teachers:', error);
      setState(prev => ({
        ...prev,
        teachers: [],
        errors: { ...prev.errors, teachers: error.message },
        loading: { ...prev.loading, teachers: false }
      }));
    }
  };

  // Mỗi khi lịch hoặc ngày thay đổi → reload danh sách giáo viên khả dụng
  useEffect(() => {
    if (!visible) return;
    // Tải danh sách GV khi thay đổi lịch, khối, môn hoặc chuyển sang bước 3
    if (state.activeStep === 3 || state.activeStep === 1) {
      loadAvailableTeachers();
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [formData.startDate, formData.endDate, JSON.stringify(formData.schedule), formData.educationLevel, state.activeStep, template?.subject, visible]);

  // Load rooms
  const loadRooms = async () => {
    setState(prev => ({ ...prev, loading: { ...prev.loading, rooms: true } }));
    
    try {
      const response = await classManagementService.getAllRooms();
      const roomsData = response.data?.data || response.data || [];
      setState(prev => ({
        ...prev,
        rooms: Array.isArray(roomsData) ? roomsData : [],
        loading: { ...prev.loading, rooms: false }
      }));
    } catch (error) {
      console.error('Error loading rooms:', error);
      setState(prev => ({
        ...prev,
        rooms: [],
        errors: { ...prev.errors, rooms: error.message },
        loading: { ...prev.loading, rooms: false }
      }));
    }
  };

  // Check schedule conflicts
  const checkScheduleConflicts = async (scheduleData) => {
    setState(prev => ({ ...prev, loading: { ...prev.loading, conflicts: true } }));
    
    try {
      const response = await classManagementService.checkScheduleConflicts(scheduleData);
      setState(prev => ({
        ...prev,
        conflicts: response.data || [],
        loading: { ...prev.loading, conflicts: false }
      }));
    } catch (error) {
      console.error('Error checking conflicts:', error);
      setState(prev => ({
        ...prev,
        conflicts: [],
        loading: { ...prev.loading, conflicts: false }
      }));
    }
  };

  // Handle form field changes
  const handleFieldChange = (field, value) => {
    if (field.includes('.')) {
      const [parent, child] = field.split('.');
      setFormData(prev => ({
        ...prev,
        [parent]: { ...prev[parent], [child]: value },
        validation: { ...prev.validation, [field]: null }
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [field]: value,
        validation: { ...prev.validation, [field]: null }
      }));
    }
  };

  // Handle schedule days change
  const handleScheduleDaysChange = (day) => {
    const newDays = formData.schedule.days.includes(day)
      ? formData.schedule.days.filter(d => d !== day)
      : [...formData.schedule.days, day];
    
    setFormData(prev => ({
      ...prev,
      schedule: { ...prev.schedule, days: newDays },
      validation: { ...prev.validation, scheduleDays: null }
    }));
  };

  // Handle form submission
  const handleSubmit = async () => {
    // Validate form 
    const validation = validateClassForm(formData);
    if (Object.keys(validation).length > 0) {
      setFormData(prev => ({ ...prev, validation }));
      showNotification('Vui lòng kiểm tra lại thông tin', 'warning');
      return;
    }

    // Check conflicts and confirm if needed
    if (state.conflicts.length > 0) {
      const confirmed = await showConfirmDialog(
        'Phát hiện xung đột lịch học',
        `Có ${state.conflicts.length} xung đột lịch được phát hiện. Bạn có muốn tiếp tục tạo lớp học?`
      );
      if (!confirmed) return;
    }

    setState(prev => ({ ...prev, loading: { ...prev.loading, submit: true } }));

    try {
      const classData = {
        courseTemplateId: template.id,
        className: formData.className,
        description: formData.description,
        teacherId: formData.teacherId,
        roomId: formData.roomId,
        startDate: formData.startDate,
        // endDate có thể để trống; BE sẽ tự tính dựa vào lessons & lịch học
        endDate: formData.endDate || null,
        schedule: JSON.stringify(formData.schedule),
        maxStudents: formData.maxStudents,
        settings: formData.settings,
        createdBy: getCurrentUserId()
      };

      const response = await classManagementService.createClass(classData);
      
      showNotification(`Tạo lớp học "${formData.className}" thành công!`, 'success');
      
      // Reset form and close modal
      handleReset();
      onSuccess(response.data);
      
    } catch (error) {
      console.error('Create class error:', error);
      showNotification('Lỗi tạo lớp học: ' + (error.response?.data?.message || error.message), 'error');
    } finally {
      setState(prev => ({ ...prev, loading: { ...prev.loading, submit: false } }));
    }
  };

  // Reset form
  const handleReset = () => {
    setFormData({
      className: '',
      description: '',
      teacherId: null,
      roomId: null,
      startDate: '',
      endDate: '',
      schedule: {
        days: [],
        startTime: '',
        endTime: '',
        duration: 120
      },
      maxStudents: 30,
      settings: {
        allowLateEnrollment: true,
        requireApproval: false,
        isPublic: true
      },
      validation: {}
    });
    setState(prev => ({ ...prev, conflicts: [] }));
  };

  // Handle cancel
  const handleCancel = () => {
    handleReset();
    onCancel();
  };

  if (!visible || !template) return null;

  const dayNames = [
    { key: 'monday', label: 'Thứ 2' },
    { key: 'tuesday', label: 'Thứ 3' },
    { key: 'wednesday', label: 'Thứ 4' },
    { key: 'thursday', label: 'Thứ 5' },
    { key: 'friday', label: 'Thứ 6' },
    { key: 'saturday', label: 'Thứ 7' },
    { key: 'sunday', label: 'Chủ nhật' }
  ];

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-6xl max-h-[95vh] overflow-y-auto">
        <div className="p-6">
          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <div>
              <h3 className="text-xl font-semibold text-gray-900 flex items-center">
                <span className="text-2xl mr-3">🏫</span>
                Tạo lớp học từ: {template.name}
              </h3>
              <p className="text-sm text-gray-600 mt-1">
                {template.description}
              </p>
            </div>
            <button
              onClick={handleCancel}
              className="text-gray-400 hover:text-gray-600 text-2xl font-bold"
            >
              ×
            </button>
          </div>

          {/* Step Navigation */}
          <div className="border-b border-gray-200 mb-6">
            <nav className="flex space-x-8">
              {[
                { step: 1, label: '📋 Thông tin cơ bản', desc: 'Tên lớp, giáo viên' },
                { step: 2, label: '📅 Lịch học & Phòng', desc: 'Thời gian, phòng học' },
                { step: 3, label: '🔍 Xem trước & Tạo', desc: 'Kiểm tra và hoàn tất' }
              ].map(item => (
                <button
                  key={item.step}
                  onClick={() => goToStep(item.step)}
                  className={`py-4 px-2 border-b-2 font-medium text-sm transition-colors ${
                    state.activeStep === item.step
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <div>{item.label}</div>
                  <div className="text-xs opacity-75">{item.desc}</div>
                </button>
              ))}
            </nav>
          </div>

          {/* Schedule Conflicts Alert */}
          {state.conflicts.length > 0 && (
            <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
              <div className="flex items-center mb-2">
                <span className="text-red-600 mr-2 text-xl">⚠️</span>
                <h4 className="text-red-800 font-medium">
                  Phát hiện {state.conflicts.length} xung đột lịch học!
                </h4>
              </div>
              <div className="space-y-1">
                {state.conflicts.map((conflict, index) => (
                  <div key={index} className="flex items-start text-sm text-red-700">
                    <span className="mr-2 mt-0.5">•</span>
                    <span>{conflict.details || conflict.message || 'Xung đột lịch học'}</span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Step Content */}
          {state.activeStep === 1 && (
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Main Form */}
              <div className="lg:col-span-2 space-y-6">
              {/* Basic Information */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-medium text-gray-900 mb-4 flex items-center">
                  <span className="mr-2">📝</span>
                  Thông tin cơ bản
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Tên lớp học <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="text"
                      value={formData.className}
                      onChange={(e) => handleFieldChange('className', e.target.value)}
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                        formData.validation.className ? 'border-red-300 bg-red-50' : 'border-gray-300'
                      }`}
                      placeholder="Ví dụ: Java-Spring-2024-K1"
                    />
                    {formData.validation.className && (
                      <p className="mt-1 text-sm text-red-600">{formData.validation.className}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Số học viên tối đa</label>
                    <input
                      type="number"
                      min="1"
                      max="100"
                      value={formData.maxStudents}
                      onChange={(e) => handleFieldChange('maxStudents', parseInt(e.target.value) || 30)}
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                        formData.validation.maxStudents ? 'border-red-300 bg-red-50' : 'border-gray-300'
                      }`}
                    />
                    {formData.validation.maxStudents && (
                      <p className="mt-1 text-sm text-red-600">{formData.validation.maxStudents}</p>
                    )}
                  </div>
                </div>

                <div className="mt-4">
                  <label className="block text-sm font-medium text-gray-700 mb-2">Mô tả lớp học</label>
                  <textarea
                    rows={3}
                    value={formData.description}
                    onChange={(e) => handleFieldChange('description', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Mô tả về lớp học, yêu cầu đầu vào, mục tiêu..."
                  />
                </div>
              </div>

              {/* Education Level (Khối học) */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-medium text-gray-900 mb-4 flex items-center">
                  <span className="mr-2">🏷️</span>
                  Khối học
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Chọn khối</label>
                    <select
                      value={formData.educationLevel || ''}
                      onChange={(e) => handleFieldChange('educationLevel', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Không xác định</option>
                      <option value="10">Khối 10</option>
                      <option value="11">Khối 11</option>
                      <option value="12">Khối 12</option>
                    </select>
                    <p className="text-xs text-gray-500 mt-2">Dùng để lọc giáo viên phù hợp ở bước sau.</p>
                  </div>
                </div>
              </div>

              {/* Schedule Configuration */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-medium text-gray-900 mb-4 flex items-center">
                  <span className="mr-2">📅</span>
                  Lịch học
                  {state.loading.conflicts && (
                    <span className="ml-2 text-sm text-blue-600">
                      <span className="animate-spin inline-block">⟳</span> Đang kiểm tra xung đột...
                    </span>
                  )}
                </h4>
                
                {/* Date Range */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Ngày bắt đầu <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="date"
                      value={formData.startDate}
                      onChange={(e) => handleFieldChange('startDate', e.target.value)}
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                        formData.validation.startDate ? 'border-red-300 bg-red-50' : 'border-gray-300'
                      }`}
                    />
                    {formData.validation.startDate && (
                      <p className="mt-1 text-sm text-red-600">{formData.validation.startDate}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Ngày kết thúc <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="date"
                      value={formData.endDate}
                      onChange={(e) => handleFieldChange('endDate', e.target.value)}
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                        formData.validation.endDate ? 'border-red-300 bg-red-50' : 'border-gray-300'
                      }`}
                    />
                    {formData.validation.endDate && (
                      <p className="mt-1 text-sm text-red-600">{formData.validation.endDate}</p>
                    )}
                  </div>
                </div>

                {/* Days of Week */}
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ngày học trong tuần <span className="text-red-500">*</span>
                  </label>
                  <div className="grid grid-cols-3 md:grid-cols-7 gap-2">
                    {dayNames.map(day => (
                      <label key={day.key} className="flex items-center">
                        <input
                          type="checkbox"
                          checked={formData.schedule.days.includes(day.key)}
                          onChange={() => handleScheduleDaysChange(day.key)}
                          className="mr-2 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        />
                        <span className="text-sm">{day.label}</span>
                      </label>
                    ))}
                  </div>
                  {formData.validation.scheduleDays && (
                    <p className="mt-1 text-sm text-red-600">{formData.validation.scheduleDays}</p>
                  )}
                </div>

                {/* Time Range */}
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Giờ bắt đầu <span className="text-red-500">*</span>
                    </label>
                      <select
                        value={formData.schedule.startTime}
                        onChange={(e) => {
                          const start = e.target.value;
                          // auto set endTime = start + 120 minutes
                          const [h, m] = start.split(':').map(Number);
                          const d = new Date(0, 0, 0, h, m + 120, 0);
                          const end = `${String(d.getHours()).padStart(2, '0')}:${String(d.getMinutes()).padStart(2, '0')}`;
                          handleFieldChange('schedule.startTime', start);
                          handleFieldChange('schedule.endTime', end);
                        }}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      >
                        {['07:30','09:30','13:30','15:30','18:00','20:00'].map(t => (
                          <option key={t} value={t}>{t}</option>
                        ))}
                      </select>
                  </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Giờ kết thúc
                      </label>
                      <input
                        type="time"
                        value={formData.schedule.endTime}
                        readOnly
                        className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100 text-gray-600"
                      />
                    </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Thời lượng (phút)</label>
                      <input
                        type="number"
                        min="120"
                        max="120"
                        step="0"
                        value={120}
                        readOnly
                        className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100 text-gray-600"
                      />
                  </div>
                </div>
                {formData.validation.scheduleTime && (
                  <p className="mt-1 text-sm text-red-600">{formData.validation.scheduleTime}</p>
                )}
              </div>

              {/* Advanced Settings */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-medium text-gray-900 mb-4 flex items-center">
                  <span className="mr-2">⚙️</span>
                  Cài đặt nâng cao
                </h4>
                <div className="space-y-3">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={formData.settings.allowLateEnrollment}
                      onChange={(e) => handleFieldChange('settings.allowLateEnrollment', e.target.checked)}
                      className="mr-3 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-sm">Cho phép đăng ký muộn</span>
                  </label>

                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={formData.settings.requireApproval}
                      onChange={(e) => handleFieldChange('settings.requireApproval', e.target.checked)}
                      className="mr-3 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-sm">Yêu cầu duyệt khi đăng ký</span>
                  </label>

                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={formData.settings.isPublic}
                      onChange={(e) => handleFieldChange('settings.isPublic', e.target.checked)}
                      className="mr-3 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-sm">Công khai lớp học</span>
                  </label>
                </div>
              </div>
            </div>

            {/* Sidebar - Template Info & Preview */}
            <div className="space-y-6">
              {/* Template Information */}
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h4 className="font-medium text-blue-900 mb-3 flex items-center">
                  <span className="mr-2">📚</span>
                  Template: {template.name}
                </h4>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-blue-700">Tổng số tuần:</span>
                    <span className="font-medium">{template.totalWeeks || 'N/A'}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-blue-700">Số bài học:</span>
                    <span className="font-medium">{template.lessonCount || 'N/A'}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-blue-700">Môn học:</span>
                    <span className="font-medium">{template.subject || 'N/A'}</span>
                  </div>
                </div>
              </div>

              {/* Schedule Preview */}
              {(formData.schedule.days.length > 0 && formData.schedule.startTime && formData.schedule.endTime) && (
                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                  <h4 className="font-medium text-green-900 mb-3 flex items-center">
                    <span className="mr-2">📅</span>
                    Xem trước lịch học
                  </h4>
                  <div className="text-sm text-green-800">
                    <p className="mb-2">
                      <strong>Lịch:</strong> {formatSchedule(formData.schedule)}
                    </p>
                    {formData.startDate && formData.endDate && (
                      <p className="mb-2">
                        <strong>Thời gian:</strong><br />
                        {formData.startDate} → {formData.endDate}
                      </p>
                    )}
                    <p>
                      <strong>Thời lượng mỗi buổi:</strong> {formData.schedule.duration} phút
                    </p>
                  </div>
                </div>
              )}

              {/* Conflict Status */}
              <div className={`border rounded-lg p-4 ${
                state.conflicts.length > 0 ? 'bg-red-50 border-red-200' : 'bg-green-50 border-green-200'
              }`}>
                <h4 className={`font-medium mb-2 flex items-center ${
                  state.conflicts.length > 0 ? 'text-red-900' : 'text-green-900'
                }`}>
                  <span className="mr-2">{state.conflicts.length > 0 ? '⚠️' : '✅'}</span>
                  Trạng thái xung đột
                </h4>
                <p className={`text-sm ${
                  state.conflicts.length > 0 ? 'text-red-800' : 'text-green-800'
                }`}>
                  {state.loading.conflicts ? 'Đang kiểm tra...' :
                   state.conflicts.length > 0 ? 
                   `${state.conflicts.length} xung đột được phát hiện` :
                   'Không có xung đột lịch học'}
                </p>
              </div>
            </div>
          </div>
          )}

          {/* Step 2: Chọn phòng cho từng tiết */}
          {state.activeStep === 2 && (
            <div>
              <ScheduleManager
                classData={{
                  id: null, // New class
                  template: template,
                  expectedStudents: formData.maxStudents
                }}
                existingSchedule={state.schedule}
                onScheduleChange={handleScheduleChange}
                onScheduleValidate={handleScheduleValidate}
                mode="create"
                teacherId={formData.teacherId}
                startDate={formData.startDate}
                endDate={formData.endDate}
                weeklySchedule={formData.schedule}
              />
            </div>
          )}

          {/* Step 3: Chọn giáo viên & Review */}
          {state.activeStep === 3 && (
            <div className="space-y-6">
              <h3 className="text-lg font-medium text-gray-900">🔍 Xem trước & Hoàn tất</h3>
              {/* Chọn giáo viên ở bước review để đảm bảo sau khi đã cố định lịch */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-medium text-gray-900 mb-4 flex items-center">
                  <span className="mr-2">👨‍🏫</span>
                  Chọn giáo viên
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Giáo viên <span className="text-red-500">*</span>
                    </label>
                    <select
                      value={formData.teacherId || ''}
                      onChange={(e) => handleFieldChange('teacherId', parseInt(e.target.value) || null)}
                      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                        formData.validation.teacherId ? 'border-red-300 bg-red-50' : 'border-gray-300'
                      }`}
                      disabled={state.loading.teachers || !isScheduleReady()}
                    >
                      <option value="">
                        {!isScheduleReady()
                          ? 'Vui lòng hoàn tất lịch + ngày để gợi ý giáo viên'
                          : state.loading.teachers
                            ? 'Đang lọc giáo viên phù hợp...'
                            : (state.teachers.length === 0 ? 'Không có giáo viên phù hợp' : 'Chọn giáo viên')}
                      </option>
                      {state.teachers.map(teacher => (
                        <option key={teacher.id} value={teacher.id}>
                          {teacher.fullName || teacher.name} - {teacher.department || 'Chưa có chuyên môn'}
                        </option>
                      ))}
                    </select>
                    {formData.validation.teacherId && (
                      <p className="mt-1 text-sm text-red-600">{formData.validation.teacherId}</p>
                    )}
                  </div>
                </div>
                <p className="text-xs text-gray-600 mt-2">Danh sách giáo viên đã được lọc theo môn học, khối {formData.educationLevel || template?.grade || 'N/A'} và lịch, đồng thời kiểm tra xung đột.</p>
              </div>
              
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <h4 className="font-medium text-gray-900 mb-3">📋 Thông tin lớp học</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-gray-600">Tên lớp:</span>
                        <span className="font-medium">{formData.className || 'Chưa nhập'}</span>
                      </div>
                       <div className="flex justify-between">
                        <span className="text-gray-600">Giáo viên:</span>
                        <span className="font-medium">
                          {state.teachers.find(t => t.id === formData.teacherId)?.fullName || 'Chưa chọn'}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Số học viên tối đa:</span>
                        <span className="font-medium">{formData.maxStudents}</span>
                      </div>
                    </div>
                  </div>

                  <div className="bg-blue-50 p-4 rounded-lg">
                    <h4 className="font-medium text-blue-900 mb-3">📅 Lịch học</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-blue-700">Số tiết học:</span>
                        <span className="font-medium">{state.schedule.length}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-blue-700">Tiết có phòng:</span>
                        <span className="font-medium">
                          {state.schedule.filter(s => s.room).length} / {state.schedule.length}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="bg-yellow-50 p-4 rounded-lg">
                    <h4 className="font-medium text-yellow-900 mb-3">⚠️ Kiểm tra cuối cùng</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex items-center">
                        <span className={`mr-2 ${formData.className ? 'text-green-600' : 'text-red-600'}`}>
                          {formData.className ? '✓' : '✗'}
                        </span>
                        <span>Tên lớp học</span>
                      </div>
                      <div className="flex items-center">
                        <span className={`mr-2 ${formData.teacherId ? 'text-green-600' : 'text-red-600'}`}>
                          {formData.teacherId ? '✓' : '✗'}
                        </span>
                        <span>Giáo viên phụ trách</span>
                      </div>
                      <div className="flex items-center">
                        <span className={`mr-2 ${state.schedule.length > 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {state.schedule.length > 0 ? '✓' : '✗'}
                        </span>
                        <span>Lịch học đã thiết lập</span>
                      </div>
                      <div className="flex items-center">
                        <span className={`mr-2 ${state.scheduleValidation?.isValid !== false ? 'text-green-600' : 'text-red-600'}`}>
                          {state.scheduleValidation?.isValid !== false ? '✓' : '✗'}
                        </span>
                        <span>Không có xung đột lịch</span>
                      </div>
                    </div>
                  </div>

                  {state.scheduleValidation && !state.scheduleValidation.isValid && (
                    <div className="bg-red-50 p-4 rounded-lg">
                      <h4 className="font-medium text-red-900 mb-3">🚫 Vấn đề cần khắc phục</h4>
                      <div className="space-y-1 text-sm text-red-800">
                        {state.scheduleValidation.conflicts?.map((conflict, index) => (
                          <div key={index}>• {conflict.message || conflict}</div>
                        ))}
                        {state.scheduleValidation.errors?.map((error, index) => (
                          <div key={index}>• {error}</div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* Step Navigation Buttons */}
          <div className="flex justify-between items-center mt-8 pt-6 border-t">
            <div className="flex space-x-3">
              {state.activeStep > 1 && (
                <button
                  onClick={() => goToStep(state.activeStep - 1)}
                  className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                >
                  ← Quay lại
                </button>
              )}
            </div>

            <div className="flex space-x-3">
              <button
                onClick={handleCancel}
                className="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
              >
                Hủy
              </button>
              
              {state.activeStep < 3 ? (
                <button
                  onClick={() => goToStep(state.activeStep + 1)}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  Tiếp tục →
                </button>
              ) : (
                <button
                  onClick={handleSubmit}
                  disabled={state.loading.submit || 
                    !formData.className || 
                    !formData.teacherId || 
                    state.schedule.length === 0}
                  className="px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
                >
                  {state.loading.submit ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Đang tạo...
                    </>
                  ) : (
                    <>
                      <span className="mr-2">🎯</span>
                      Tạo lớp học
                    </>
                  )}
                </button>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateClassModal;