import { message } from 'antd';
import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import CourseCreationModal from '../../components/teacher/CourseCreationModal';
import CreateLectureModal from '../../components/teacher/CreateLectureModal';

const TeacherCoursesSimple = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [courses, setCourses] = useState([]);
  const [error, setError] = useState(null);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showCreateCourseModal, setShowCreateCourseModal] = useState(false);
  const [selectedCourseId, setSelectedCourseId] = useState(null);

  useEffect(() => {
    loadTeacherCourses();
  }, []);

  const loadTeacherCourses = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const token = localStorage.getItem('token');
      
      // Using fetch instead of axios for better error handling
      const response = await fetch('http://localhost:8088/api/classrooms/current-teacher', {
        headers: {
          'Authorization': token ? `Bearer ${token}` : '',
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      });
      
      if (!response.ok) {
        const errorData = await response.text();
        console.error('API Error:', response.status, errorData);
        throw new Error(`Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server (${response.status})`);
      }
      
      const data = await response.json();
      console.log('Teacher courses response:', data);
      setCourses(data || []);
    } catch (error) {
      console.error('Error loading teacher courses:', error);
      setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch kh√≥a h·ªçc. Vui l√≤ng th·ª≠ l·∫°i: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleCreateLecture = (courseId) => {
    setSelectedCourseId(courseId);
    setShowCreateModal(true);
  };

  const handleLectureCreated = () => {
    setShowCreateModal(false);
    setSelectedCourseId(null);
    // Reload courses to get updated data
    loadTeacherCourses();
  };
  
  const handleCourseSuggested = (newCourse) => {
    setShowCreateCourseModal(false);
    
    // Show a success message
    message.success(`ƒê·ªÅ xu·∫•t kh√≥a h·ªçc "${newCourse.name}" ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!`);
    
    // Optional: Reload all courses to ensure data consistency
    setTimeout(() => {
      loadTeacherCourses();
    }, 500);
  };

  const handleViewDetail = (courseId) => {
    navigate(`/teacher/courses/${courseId}`);
  };

  if (loading) {
    return (
      <div className="p-8">
        <h1 className="text-2xl font-bold mb-4">Qu·∫£n l√Ω kh√≥a h·ªçc</h1>
        <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-8">
        <h1 className="text-2xl font-bold mb-4">Qu·∫£n l√Ω kh√≥a h·ªçc</h1>
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          <p>{error}</p>
          <button 
            onClick={loadTeacherCourses}
            className="mt-2 bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
          >
            Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="p-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Qu·∫£n l√Ω kh√≥a h·ªçc</h1>
        <div className="flex gap-2">
          <button 
            onClick={() => setShowCreateCourseModal(true)}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 flex items-center gap-2"
          >
            <span className="text-sm">üìù</span>
            ƒê·ªÅ xu·∫•t kh√≥a h·ªçc m·ªõi
          </button>
          <button 
            onClick={() => {
              if (courses.length === 0) {
                message.warning("B·∫°n c·∫ßn c√≥ kh√≥a h·ªçc tr∆∞·ªõc khi t·∫°o b√†i gi·∫£ng!");
              } else if (courses.length === 1) {
                // If there's only one course, select it automatically
                setSelectedCourseId(courses[0].id);
                setShowCreateModal(true);
              } else {
                // If multiple courses, require selection
                setSelectedCourseId(null); // Clear any previous selection
                setShowCreateModal(true);
              }
            }}
            className={`${
              courses.length === 0 
                ? "bg-gray-400 cursor-not-allowed" 
                : "bg-green-500 hover:bg-green-600"
            } text-white px-4 py-2 rounded flex items-center gap-2`}
            disabled={courses.length === 0}
          >
            <span className="text-sm">üìö</span>
            T·∫°o b√†i gi·∫£ng m·ªõi
          </button>
        </div>
      </div>
      
      {courses.length === 0 ? (
        <div className="text-center py-8">
          <p className="text-gray-500 mb-4">Ch∆∞a c√≥ kh√≥a h·ªçc n√†o ƒë∆∞·ª£c ph√¢n c√¥ng.</p>
          <div className="bg-yellow-50 border border-yellow-200 p-4 rounded-lg max-w-lg mx-auto">
            <h3 className="text-lg font-semibold text-yellow-700 mb-2">Th√¥ng b√°o</h3>
            <p className="text-yellow-600">
              Gi√°o vi√™n kh√¥ng th·ªÉ tr·ª±c ti·∫øp t·∫°o kh√≥a h·ªçc. B·∫°n c√≥ th·ªÉ g·ª≠i ƒë·ªÅ xu·∫•t kh√≥a h·ªçc m·ªõi k√®m theo th·ªùi gian kh√¥ng th·ªÉ d·∫°y ƒë·ªÉ nh√† tr∆∞·ªùng xem x√©t v√† s·∫Øp x·∫øp l·ªãch ph√π h·ª£p.
            </p>
            <button 
              onClick={() => setShowCreateCourseModal(true)}
              className="mt-3 bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600"
            >
              ƒê·ªÅ xu·∫•t kh√≥a h·ªçc m·ªõi
            </button>
          </div>
        </div>
      ) : (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {courses.map((course) => (
            <div key={course.id} className="bg-white rounded-lg shadow-md p-6 border">
              <h3 className="text-xl font-semibold mb-2">{course.name}</h3>
              <p className="text-gray-600 mb-3">{course.description}</p>
              
              <div className="space-y-2 text-sm">
                <div>
                  <span className="font-medium">M√¥n h·ªçc:</span> {course.subject}
                </div>
                <div>
                  <span className="font-medium">L·ªõp:</span> {course.section}
                </div>
                <div>
                  <span className="font-medium">H·ªçc vi√™n:</span> {course.enrolledStudents?.length || 0}
                </div>
                <div>
                  <span className="font-medium">B√†i t·∫≠p:</span> {course.assignments?.length || 0}
                </div>
              </div>
              
              <div className="mt-4 flex space-x-2">
                <button 
                  onClick={() => handleViewDetail(course.id)}
                  className="px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600"
                >
                  Xem chi ti·∫øt
                </button>
                <button 
                  onClick={() => navigate(`/teacher/courses/${course.id}/edit`)}
                  className="px-3 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600"
                >
                  Ch·ªânh s·ª≠a
                </button>
                <button 
                  onClick={() => navigate(`/teacher/courses/${course.id}/assignments`)}
                  className="px-3 py-1 text-sm bg-purple-500 text-white rounded hover:bg-purple-600"
                >
                  B√†i t·∫≠p
                </button>
                <button 
                  onClick={() => handleCreateLecture(course.id)}
                  className="px-3 py-1 text-sm bg-orange-500 text-white rounded hover:bg-orange-600"
                >
                  T·∫°o b√†i gi·∫£ng
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
      
      {courses.length > 0 && (
        <div className="mt-8 bg-gray-50 p-4 rounded-lg">
          <h3 className="text-lg font-semibold mb-2">Th·ªëng k√™ t·ªïng quan</h3>
          <div className="grid grid-cols-3 gap-4 text-center">
            <div>
              <div className="text-2xl font-bold text-blue-600">{courses.length}</div>
              <div className="text-sm text-gray-600">Kh√≥a h·ªçc</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-green-600">
                {courses.reduce((total, course) => total + (course.enrolledStudents?.length || 0), 0)}
              </div>
              <div className="text-sm text-gray-600">H·ªçc vi√™n</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-purple-600">
                {courses.reduce((total, course) => total + (course.assignments?.length || 0), 0)}
              </div>
              <div className="text-sm text-gray-600">B√†i t·∫≠p</div>
            </div>
          </div>
        </div>
      )}

      <div className="mt-6 bg-blue-50 border border-blue-200 p-4 rounded-lg">
        <h3 className="text-lg font-semibold text-blue-700 mb-2">L∆∞u √Ω v·ªÅ ƒë·ªÅ xu·∫•t kh√≥a h·ªçc</h3>
        <p className="text-blue-600">
          Gi√°o vi√™n kh√¥ng th·ªÉ tr·ª±c ti·∫øp t·∫°o kh√≥a h·ªçc. Khi b·∫°n ƒë·ªÅ xu·∫•t kh√≥a h·ªçc m·ªõi, vui l√≤ng cung c·∫•p th√¥ng tin v·ªÅ th·ªùi gian kh√¥ng th·ªÉ d·∫°y ƒë·ªÉ nh√† tr∆∞·ªùng xem x√©t v√† s·∫Øp x·∫øp l·ªãch ph√π h·ª£p.
        </p>
      </div>

      {/* Create Lecture Modal */}
      <CreateLectureModal
        open={showCreateModal}
        onCancel={() => {
          setShowCreateModal(false);
          setSelectedCourseId(null);
        }}
        onSuccess={handleLectureCreated}
        courseId={selectedCourseId}
      />
      
      {/* Suggest Course Modal */}
      <CourseCreationModal
        visible={showCreateCourseModal}
        onCancel={() => setShowCreateCourseModal(false)}
        onSuccess={handleCourseSuggested}
      />
    </div>
  );
};

export default TeacherCoursesSimple;
