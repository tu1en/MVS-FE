import {
  MessageOutlined,
  PlusOutlined,
  ReloadOutlined,
  SearchOutlined,
  SendOutlined,
  UserOutlined,
  LoadingOutlined
} from '@ant-design/icons';
import {
  Avatar,
  Badge,
  Button,
  Card,
  Col,
  Divider,
  Form,
  Input,
  List,
  message,
  Modal,
  Row,
  Select,
  Space,
  Spin,
  Tag,
  Typography,
  Alert
} from 'antd';
import { useEffect, useState } from 'react';
import api from '../../services/api';

// Utility function to fix Vietnamese encoding issues
const fixEncoding = (text) => {
  if (!text) return '';
  
  // Vietnamese character mappings - expanded list
  const textReplacements = [
    // Classes and subjects
    { find: /L\?p/g, replace: 'Lớp' },
    { find: /H\?c/g, replace: 'Học' },
    { find: /Tr\?c/g, replace: 'Trực' },
    { find: /Tuy\?n/g, replace: 'Tuyến' },
    { find: /Vi\?t/g, replace: 'Việt' },

    // Common Vietnamese words
    { find: /h\?c/g, replace: 'học' },
    { find: /ti\?ng/g, replace: 'tiếng' },
    { find: /gi\?i/g, replace: 'giỏi' },
    { find: /hi\?n/g, replace: 'hiện' },
    { find: /d\?i/g, replace: 'đại' },
    { find: /\?i h\?c/g, replace: 'đại học' },
    { find: /t\?i/g, replace: 'tại' },
    { find: /\?y/g, replace: 'ấy' },
    { find: /\?u/g, replace: 'ều' },
    { find: /n\?i/g, replace: 'nội' },
    { find: /s\?/g, replace: 'số' },
    { find: /m\?n/g, replace: 'môn' },
    { find: /\?i\?m/g, replace: 'điểm' },
    { find: /\?i/g, replace: 'ời' },
    { find: /l\?i/g, replace: 'lời' },
    { find: /tr\?/g, replace: 'trả' },
    { find: /tr\? l\?i/g, replace: 'trả lời' },

    // Common ending syllables
    { find: /\?c/g, replace: 'ộc' },
    { find: /\?ng/g, replace: 'ống' },
    { find: /\?n/g, replace: 'ận' },
    { find: /\?o/g, replace: 'ạo' },
    { find: /\?a/g, replace: 'ưa' },
    { find: /\?m/g, replace: 'ấm' },
    { find: /\?t/g, replace: 'ất' },
    { find: /\?p/g, replace: 'ập' },
    { find: /\?u/g, replace: 'ều' },

    // Common diacritics combinations
    { find: /\?/g, replace: 'ế' } // Last resort - common case
  ];
  
  // Apply all the replacements
  let result = text;
  textReplacements.forEach(replacement => {
    result = result.replace(replacement.find, replacement.replace);
  });
  
  // If text still has ? but wasn't fixed by any of the above rules, log for debugging
  if (result.includes('?')) {
    console.log('Text still contains ? after replacements:', result);
  }
  
  return result;
};

// Helper function to normalize student data from different API structures
const normalizeStudentData = (student) => {
  // Ensure we have an object
  if (!student || typeof student !== 'object') {
    console.warn('Invalid student data received:', student);
    return null;
  }
  
  // Get ID from various possible fields
  const id = student.id || student.userId || student.studentId;
  if (!id) {
    console.warn('Student without ID:', student);
    return null;
  }
  
  // Get name from various possible fields
  const fullName = fixEncoding(
    student.fullName || 
    student.name || 
    student.username || 
    `Học sinh ${id}`
  );
  
  // Get other identifying information
  const username = student.username || 
                  student.email || 
                  student.userEmail || 
                  `student${id}`;
                  
  const studentCode = student.studentCode || 
                      student.code || 
                      student.enrollmentCode || 
                      `SV${id}`;
                      
  // Get classroom info if available
  const classroomId = student.classroomId || student.classId;
  const classroomName = student.classroomName ? 
                       fixEncoding(student.classroomName) :
                       student.className ? 
                       fixEncoding(student.className) :
                       classroomId ? `Lớp ${classroomId}` : null;
  
  // Return normalized object
  return {
    ...student, // Keep original data
    id: parseInt(id),
    fullName,
    username,
    studentCode,
    classroomId,
    classroomName
  };
};

const { Title, Text } = Typography;
const { TextArea } = Input;
const { Option } = Select;

const TeacherMessagesPage = () => {
  // State management
  const [messages, setMessages] = useState([]);
  const [students, setStudents] = useState([]);
  const [selectedConversation, setSelectedConversation] = useState(null);
  const [conversationMessages, setConversationMessages] = useState([]);
  const [loading, setLoading] = useState(true);
  const [sending, setSending] = useState(false);
  const [newMessage, setNewMessage] = useState('');
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [searchText, setSearchText] = useState('');
  const [loadingStudents, setLoadingStudents] = useState(true); // Separate loading state for students
  const [studentFetchError, setStudentFetchError] = useState(null);
  
  // Form for new message
  const [form] = Form.useForm();
  
  // Get teacher info from localStorage
  const teacherId = localStorage.getItem('userId');

  useEffect(() => {
    if (teacherId) {
      fetchMessages();
      fetchStudents();
    }
  }, [teacherId]);

  const fetchMessages = async () => {
    try {
      setLoading(true);
      const messagesData = await api.GetReceivedMessages(teacherId);
      setMessages(messagesData);
    } catch (error) {
      console.error('Error fetching messages:', error);
      message.error('Không thể tải tin nhắn');
    } finally {
      setLoading(false);
    }
  };

  const fetchStudents = async () => {
    try {
      setLoadingStudents(true);
      setStudentFetchError(null);
      console.log('Fetching students from database...');
      
      // STRATEGY 1: Directly get all students by role (most efficient if it works)
      try {
        console.log('STRATEGY 1: Fetching all students via users API');
        // Role ID 1 is used for students (corrected from 3)
        const studentsByRole = await api.GetUsersByRole(1);
        
        if (studentsByRole && studentsByRole.length > 0) {
          // Normalize student data
          const normalizedStudents = studentsByRole
            .map(normalizeStudentData)
            .filter(student => student !== null);
            
          console.log(`Successfully found ${normalizedStudents.length} students by role`);
          setStudents(normalizedStudents);
          message.success(`Lấy thành công ${normalizedStudents.length} học sinh từ hệ thống`);
          setLoadingStudents(false);
          return;
        } else {
          console.log('No students found by role, trying alternative methods');
        }
      } catch (roleError) {
        console.error('Error fetching students via users API:', roleError);
      }
      
      // STRATEGY 2: Get students from each classroom the teacher has access to
      console.log('STRATEGY 2: Fetching classroom enrollments for each classroom');
      let classroomData = [];
      try {
        classroomData = await api.GetClassroomsByTeacher(teacherId);
      } catch (error) {
        console.error('Error fetching classrooms:', error);
      }
      
      if (classroomData && classroomData.length > 0) {
        console.log('Detailed classroom structure:', JSON.stringify(classroomData[0], null, 2));
        console.log('Available properties:', Object.keys(classroomData[0]));
        
        const allStudents = [];
        let fetchSuccessCount = 0;
        
        // Try to get students from each classroom
        for (const classroom of classroomData) {
          try {
            console.log(`Attempting to fetch students for classroom ID ${classroom.id}: ${classroom.name}`);
            const classStudents = await api.GetClassStudents(classroom.id);
            
            if (classStudents && classStudents.length > 0) {
              // Add classroom info to each student and normalize
              const studentsWithClassInfo = classStudents.map(student => normalizeStudentData({
                ...student,
                classroomId: classroom.id,
                classroomName: fixEncoding(classroom.name || `Lớp ${classroom.id}`)
              })).filter(student => student !== null);
              
              allStudents.push(...studentsWithClassInfo);
              fetchSuccessCount++;
              console.log(`Successfully fetched ${studentsWithClassInfo.length} students for classroom ${classroom.id}`);
            } else {
              console.log(`No students found in classroom ${classroom.id}: ${classroom.name}`);
            }
          } catch (error) {
            console.error(`Error fetching enrollments for classroom ${classroom.id}:`, error);
          }
        }
        
        // Remove duplicates (students might be in multiple classrooms)
        const uniqueStudents = [];
        const studentIds = new Set();
        
        allStudents.forEach(student => {
          if (!studentIds.has(student.id)) {
            studentIds.add(student.id);
            uniqueStudents.push(student);
          }
        });
        
        if (uniqueStudents.length > 0) {
          // Sort students alphabetically by name
          uniqueStudents.sort((a, b) => 
            (a.fullName || a.username || '').localeCompare(b.fullName || b.username || '')
          );
          
          console.log(`Total unique students found: ${uniqueStudents.length} from ${fetchSuccessCount} classrooms`);
          setStudents(uniqueStudents);
          message.success(`Lấy thành công ${uniqueStudents.length} học sinh từ ${fetchSuccessCount} lớp học`);
          setLoadingStudents(false);
          return;
        }

        // STRATEGY 3: Extract student IDs from classroom objects if available
        console.log('STRATEGY 3: Extracting student IDs from classroom properties');
        const extractedStudents = [];
        
        for (const classroom of classroomData) {
          // Check if classroom contains student information
          for (const [key, value] of Object.entries(classroom)) {
            if ((key.includes('student') || key.includes('Student')) && value) {
              console.log(`Found potential student data in property "${key}":`, value);
              
              if (Array.isArray(value)) {
                // If it's an array of students
                extractedStudents.push(...value);
              } else if (typeof value === 'object' && value !== null) {
                // If it's a nested object containing students
                extractedStudents.push(value);
              } else if (typeof value === 'number' && key === 'studentCount') {
                console.log(`Class ${classroom.id} has ${value} students but no student data`);
              }
            }
          }
        }
        
        if (extractedStudents.length > 0) {
          // Normalize the extracted students data
          const normalizedExtractedStudents = extractedStudents
            .map(normalizeStudentData)
            .filter(student => student !== null);
            
          setStudents(normalizedExtractedStudents);
          message.success(`Lấy thành công ${normalizedExtractedStudents.length} học sinh từ dữ liệu lớp học`);
          setLoadingStudents(false);
          return;
        }
      }

      // STRATEGY 4: Direct API calls to get user data for default student IDs
      console.log('STRATEGY 4: Trying direct database query for students');
      // Attempt to find users with these common student IDs
      const defaultStudentIds = [4, 5, 6, 7, 8];
      const foundStudents = [];
      
      for (const studentId of defaultStudentIds) {
        try {
          const student = await api.GetUserById(studentId);
          if (student) {
            const normalizedStudent = normalizeStudentData(student);
            if (normalizedStudent) {
              foundStudents.push(normalizedStudent);
            }
          }
        } catch (error) {
          console.log(`Could not fetch details for default student ID ${studentId}:`, error);
        }
      }
      
      console.log('Final students array:', foundStudents);
      
      if (foundStudents.length > 0) {
        setStudents(foundStudents);
        message.success(`Lấy thành công ${foundStudents.length} học sinh từ database`);
      } else {
        console.log('No students found using any strategy.');
        setStudentFetchError('Không tìm thấy học sinh nào trong hệ thống.');
        message.warning('Không tìm thấy học sinh nào trong hệ thống. Vui lòng liên hệ quản trị viên.');
      }
    } catch (error) {
      console.error('Error fetching students:', error);
      setStudentFetchError(`Không thể tải danh sách học sinh: ${error.message}`);
      message.error('Không thể tải danh sách học sinh từ cơ sở dữ liệu');
    } finally {
      setLoadingStudents(false);
    }
  };

  const fetchConversation = async (studentId) => {
    try {
      const conversationData = await api.GetConversation(teacherId, studentId);
      setConversationMessages(conversationData);
      setSelectedConversation(studentId);
    } catch (error) {
      console.error('Error fetching conversation:', error);
      message.error('Không thể tải cuộc trò chuyện');
    }
  };

  const sendMessage = async () => {
    if (!newMessage.trim() || !selectedConversation) {
      message.warning('Vui lòng nhập nội dung tin nhắn');
      return;
    }

    try {
      setSending(true);
      const messageData = {
        senderId: parseInt(teacherId),
        recipientId: selectedConversation,
        content: newMessage,
        subject: 'Tin nhắn từ giảng viên'
      };

      await api.SendMessage(messageData);

      setNewMessage('');
      message.success('Đã gửi tin nhắn thành công');
      
      // Refresh conversation
      fetchConversation(selectedConversation);
      fetchMessages(); // Refresh message list
    } catch (error) {
      console.error('Error sending message:', error);
      message.error('Không thể gửi tin nhắn');
    } finally {
      setSending(false);
    }
  };

  const sendNewMessage = async (values) => {
    try {
      setSending(true);
      const messageData = {
        senderId: parseInt(teacherId),
        recipientId: values.recipientId,
        content: values.content,
        subject: values.subject || 'Tin nhắn từ giảng viên'
      };

      await api.SendMessage(messageData);

      message.success('Đã gửi tin nhắn thành công');
      setIsModalVisible(false);
      form.resetFields();
      fetchMessages(); // Refresh message list
    } catch (error) {
      console.error('Error sending message:', error);
      message.error('Không thể gửi tin nhắn');
    } finally {
      setSending(false);
    }
  };

  const markAsRead = async (messageId) => {
    try {
      await api.MarkMessageAsRead(messageId);
      fetchMessages(); // Refresh to update read status
    } catch (error) {
      console.error('Error marking message as read:', error);
    }
  };

  // Filter messages based on search text
  const filteredMessages = messages.filter(msg => 
    msg.senderName?.toLowerCase().includes(searchText.toLowerCase()) ||
    msg.content?.toLowerCase().includes(searchText.toLowerCase()) ||
    msg.subject?.toLowerCase().includes(searchText.toLowerCase())
  );

  // Group messages by sender
  const groupedMessages = filteredMessages.reduce((acc, msg) => {
    const senderId = msg.senderId;
    if (!acc[senderId]) {
      acc[senderId] = {
        sender: msg.senderName,
        senderId: senderId,
        messages: [],
        unreadCount: 0
      };
    }
    acc[senderId].messages.push(msg);
    if (!msg.isRead) {
      acc[senderId].unreadCount++;
    }
    return acc;
  }, {});

  const conversationsList = Object.values(groupedMessages);

  return (
    <div className="p-6">
      <Row gutter={[16, 16]}>
        <Col span={24}>
          <div className="flex justify-between items-center mb-6">
            <Title level={2}>
              <MessageOutlined className="mr-2" />
              Quản lý tin nhắn
            </Title>
            <Space>
              <Button 
                type="primary" 
                icon={<PlusOutlined />}
                onClick={() => setIsModalVisible(true)}
              >
                Soạn tin nhắn mới
              </Button>
              <Button 
                icon={<ReloadOutlined />}
                onClick={fetchMessages}
                loading={loading}
              >
                Làm mới
              </Button>
            </Space>
          </div>
        </Col>

        {/* Messages List */}
        <Col span={8}>
          <Card title="Danh sách tin nhắn" size="small">
            <Input
              prefix={<SearchOutlined />}
              placeholder="Tìm kiếm tin nhắn..."
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
              className="mb-4"
            />
            
            <Spin spinning={loading}>
              <List
                dataSource={conversationsList}
                renderItem={(conversation) => (
                  <List.Item
                    className={`cursor-pointer hover:bg-gray-50 ${
                      selectedConversation === conversation.senderId ? 'bg-blue-50 border-l-4 border-blue-500' : ''
                    }`}
                    onClick={() => fetchConversation(conversation.senderId)}
                  >
                    <List.Item.Meta
                      avatar={<Avatar icon={<UserOutlined />} />}
                      title={
                        <div className="flex justify-between items-center">
                          <Text strong>{fixEncoding(conversation.sender)}</Text>
                          {conversation.unreadCount > 0 && (
                            <Badge count={conversation.unreadCount} />
                          )}
                        </div>
                      }
                      description={
                        <div>
                          <Text ellipsis>{fixEncoding(conversation.messages[0]?.content)}</Text>
                          <br />
                          <Text type="secondary" className="text-xs">
                            {new Date(conversation.messages[0]?.sentAt).toLocaleString('vi-VN')}
                          </Text>
                        </div>
                      }
                    />
                  </List.Item>
                )}
              />
            </Spin>
          </Card>
        </Col>

        {/* Conversation View */}
        <Col span={16}>
          <Card 
            title={
              selectedConversation ? 
                `Cuộc trò chuyện với ${fixEncoding(conversationMessages[0]?.senderName || 'Sinh viên')}` : 
                'Chọn một cuộc trò chuyện'
            }
            size="small"
          >
            {selectedConversation ? (
              <>
                {/* Messages */}
                <div style={{ height: '400px', overflowY: 'auto', marginBottom: '16px' }}>
                  {conversationMessages.map((msg) => (
                    <div 
                      key={msg.id} 
                      className={`mb-4 ${msg.senderId === parseInt(teacherId) ? 'text-right' : 'text-left'}`}
                    >
                      <div 
                        className={`inline-block max-w-xs p-3 rounded-lg ${
                          msg.senderId === parseInt(teacherId) 
                            ? 'bg-blue-500 text-white' 
                            : 'bg-gray-200 text-black'
                        }`}
                      >
                        <div className="font-medium text-sm mb-1">{fixEncoding(msg.subject)}</div>
                        <div>{fixEncoding(msg.content)}</div>
                        <div className="text-xs mt-1 opacity-75">
                          {new Date(msg.sentAt).toLocaleString('vi-VN')}
                        </div>
                      </div>
                      {msg.senderId !== parseInt(teacherId) && !msg.isRead && (
                        <Tag color="orange" className="ml-2" onClick={() => markAsRead(msg.id)}>
                          Chưa đọc
                        </Tag>
                      )}
                    </div>
                  ))}
                </div>

                <Divider />

                {/* Reply Input */}
                <div className="flex gap-2">
                  <TextArea
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    placeholder="Nhập tin nhắn..."
                    rows={3}
                    style={{ flex: 1 }}
                  />
                  <Button
                    type="primary"
                    icon={<SendOutlined />}
                    onClick={sendMessage}
                    loading={sending}
                  >
                    Gửi
                  </Button>
                </div>
              </>
            ) : (
              <div className="text-center text-gray-500 py-20">
                <MessageOutlined style={{ fontSize: '48px', marginBottom: '16px' }} />
                <div>Chọn một cuộc trò chuyện để bắt đầu</div>
              </div>
            )}
          </Card>
        </Col>
      </Row>

      {/* New Message Modal */}
      <Modal
        title="Soạn tin nhắn mới"
        open={isModalVisible}
        onCancel={() => setIsModalVisible(false)}
        footer={null}
      >
        <Form form={form} onFinish={sendNewMessage} layout="vertical">
          <Form.Item
            name="recipientId"
            label="Gửi đến sinh viên"
            rules={[{ required: true, message: 'Vui lòng chọn sinh viên' }]}
          >
            {studentFetchError && (
              <Alert
                message="Lỗi tải danh sách học sinh"
                description={studentFetchError}
                type="error"
                showIcon
                style={{ marginBottom: 16 }}
                action={
                  <Button size="small" onClick={fetchStudents}>
                    Thử lại
                  </Button>
                }
              />
            )}
            <Select
              placeholder="Chọn sinh viên"
              showSearch
              optionFilterProp="label"
              optionLabelProp="label"
              loading={loadingStudents}
              notFoundContent={loadingStudents ? <Spin size="small" /> : 'Không tìm thấy học sinh nào'}
            >
              {loadingStudents ? (
                <Option value="" disabled>
                  <LoadingOutlined spin /> Đang tải danh sách học sinh...
                </Option>
              ) : students && students.length > 0 ? (
                (() => {
                  // Group students by classroom
                  const classroomGroups = {};
                  const noClassStudents = [];
                  
                  students.forEach(student => {
                    // Handle different data structures that might come from API
                    const fullName = fixEncoding(student.fullName || student.name || student.username || `Học sinh ${student.id}`);
                    const username = student.username || student.email || `student${student.id}`;
                    const studentCode = student.studentCode || student.code || `SV${student.id}`;
                    
                    if (student.classroomId && student.classroomName) {
                      if (!classroomGroups[student.classroomId]) {
                        classroomGroups[student.classroomId] = {
                          name: fixEncoding(student.classroomName),
                          students: []
                        };
                      }
                      classroomGroups[student.classroomId].students.push({
                        ...student,
                        fullName,
                        username,
                        studentCode
                      });
                    } else {
                      noClassStudents.push({
                        ...student,
                        fullName,
                        username,
                        studentCode
                      });
                    }
                  });
                  
                  // Render grouped options
                  const options = [];
                  
                  // First add students from classrooms
                  Object.values(classroomGroups).forEach(group => {
                    options.push(
                      <Select.OptGroup key={`group-${group.name}`} label={`${group.name} (${group.students.length})`}>
                        {group.students.map(student => (
                          <Option 
                            key={student.id} 
                            value={student.id}
                            label={student.fullName}
                          >
                            <div className="flex flex-col">
                              <span>{student.fullName}</span>
                              <span className="text-xs text-gray-500">{student.studentCode || student.username}</span>
                            </div>
                          </Option>
                        ))}
                      </Select.OptGroup>
                    );
                  });
                  
                  // Then add students without a class
                  if (noClassStudents.length > 0) {
                    options.push(
                      <Select.OptGroup key="no-class" label="Sinh viên khác">
                        {noClassStudents.map(student => (
                          <Option 
                            key={student.id} 
                            value={student.id}
                            label={student.fullName}
                          >
                            <div className="flex flex-col">
                              <span>{student.fullName}</span>
                              <span className="text-xs text-gray-500">{student.studentCode || student.username}</span>
                            </div>
                          </Option>
                        ))}
                      </Select.OptGroup>
                    );
                  }
                  
                  return options;
                })()
              ) : (
                <Option value="" disabled>DATA TRỐNG KHÔNG CÓ NGƯỜI NHẬN</Option>
              )}
            </Select>
          </Form.Item>

          <Form.Item
            name="subject"
            label="Tiêu đề"
            rules={[{ required: true, message: 'Vui lòng nhập tiêu đề' }]}
          >
            <Input placeholder="Nhập tiêu đề tin nhắn" />
          </Form.Item>

          <Form.Item
            name="content"
            label="Nội dung"
            rules={[{ required: true, message: 'Vui lòng nhập nội dung' }]}
          >
            <TextArea rows={4} placeholder="Nhập nội dung tin nhắn" />
          </Form.Item>

          <Form.Item className="mb-0 text-right">
            <Space>
              <Button onClick={() => setIsModalVisible(false)}>
                Hủy
              </Button>
              <Button type="primary" htmlType="submit" loading={sending}>
                Gửi tin nhắn
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default TeacherMessagesPage;
