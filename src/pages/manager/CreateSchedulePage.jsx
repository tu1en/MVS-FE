import React, { useState, useEffect } from 'react';
import { Form, Input, Button, DatePicker, Select, Card, message, TimePicker } from 'antd';
import dayjs from 'dayjs';

const { Option } = Select;

function CreateSchedulePage() {
  const [form] = Form.useForm();
  const [teachers, setTeachers] = useState([]);
  const [classes, setClasses] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchTeachers();
    fetchClasses();
  }, []);

  const fetchTeachers = async () => {
    try {
      // Mock data for teachers - in a real app, this would be an API call
      setTeachers([
        { id: 1, name: 'Cô Lan' },
        { id: 2, name: 'Cô Mai' },
        { id: 3, name: 'Cô Hương' },
        { id: 4, name: 'Cô Hà' }
      ]);
    } catch (error) {
      message.error('Không thể tải danh sách giáo viên');
    }
  };

  const fetchClasses = async () => {
    try {
      // Mock data for classes - in a real app, this would be an API call
      setClasses([
        { id: 'A10', name: 'Lớp A10' },
        { id: 'A11', name: 'Lớp A11' },
        { id: 'A12', name: 'Lớp A12' },
        { id: 'A13', name: 'Lớp A13' },
        { id: 'B12', name: 'Lớp B12' },
        { id: 'C15', name: 'Lớp C15' },
        { id: 'D20', name: 'Lớp D20' }
      ]);
    } catch (error) {
      message.error('Không thể tải danh sách lớp học');
    }
  };

  const handleSubmit = async (values) => {
    setLoading(true);
    try {
      const newSchedule = {
        // In a real app, ID would be generated by the backend
        id: Date.now(), // Temporary ID generation
        classId: values.classId,
        className: classes.find(c => c.id === values.classId)?.name || values.classId,
        subject: values.subject,
        day: values.date.day(), // dayjs().day() returns 0 for Sunday, 1 for Monday...
        start: values.startTime.format('HH:mm'),
        end: values.endTime.format('HH:mm'),
        teacherId: parseInt(values.teacherId),
        teacherName: teachers.find(t => t.id === parseInt(values.teacherId))?.name || 'Unknown',
        studentIds: [], // This would be populated from another source or managed differently
        materialsUrl: values.materialsOption === 'yes' ? '#' : null, // Placeholder URL
        meetUrl: values.materialsOption === 'meet' ? '#' : null, // Placeholder URL
        room: values.location
      };

      // TODO: Replace with actual API call to save the schedule
      console.log('New Schedule Data:', newSchedule);
      // For now, we'll simulate saving and then inform the user.
      // In a real app, you would integrate with scheduleService or an API endpoint.
      // Example: await saveSchedule(newSchedule); 

      message.success('Tạo lịch học mới thành công!');
      form.resetFields();
    } catch (error) {
      message.error('Không thể tạo lịch học. Vui lòng thử lại!');
      console.error('Error creating schedule:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'flex-start', minHeight: '100vh', background: '#f5f5f5', padding: '32px 0' }}>
      <Card
        title={<span style={{ fontSize: 22, fontWeight: 600 }}>Tạo lịch học mới</span>}
        bordered={false}
        style={{ maxWidth: 700, width: '100%', boxShadow: '0 2px 12px #00000014', borderRadius: 12 }}
        bodyStyle={{ padding: 32 }}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          style={{ gap: 16, display: 'flex', flexDirection: 'column' }}
        >
          <Form.Item
            name="classId"
            label="Tên lớp"
            rules={[{ required: true, message: 'Vui lòng chọn lớp!' }]}
          >
            <Select placeholder="Chọn lớp">
              {classes.map(cls => (
                <Option key={cls.id} value={cls.id}>{cls.name}</Option>
              ))}
            </Select>
          </Form.Item>

          <Form.Item
            name="subject"
            label="Môn học"
            rules={[{ required: true, message: 'Vui lòng nhập tên môn học!' }]}
          >
            <Input placeholder="Nhập tên môn học (e.g., Toán)" />
          </Form.Item>

          <Form.Item
            name="date"
            label="Ngày học"
            rules={[{ required: true, message: 'Vui lòng chọn ngày học!' }]}
          >
            <DatePicker style={{ width: '100%' }} placeholder="Chọn thời điểm" />
          </Form.Item>

          <Form.Item
            name="startTime"
            label="Thời gian bắt đầu"
            rules={[{ required: true, message: 'Vui lòng chọn thời gian bắt đầu!' }]}
          >
            <TimePicker style={{ width: '100%' }} format="HH:mm" placeholder="Chọn thời gian" />
          </Form.Item>

          <Form.Item
            name="endTime"
            label="Thời gian kết thúc"
            rules={[{ required: true, message: 'Vui lòng chọn thời gian kết thúc!' }]}
          >
            <TimePicker style={{ width: '100%' }} format="HH:mm" placeholder="Chọn thời gian" />
          </Form.Item>

          <Form.Item
            name="location"
            label="Địa điểm"
            rules={[{ required: true, message: 'Vui lòng nhập địa điểm!' }]}
          >
            <Input placeholder="Nhập địa điểm (e.g., Phòng A101)" />
          </Form.Item>

          <Form.Item
            name="materialsOption"
            label="Tài liệu / Link Meet"
            initialValue="no"
          >
            <Select>
              <Option value="no">Không có</Option>
              <Option value="yes">Có tài liệu</Option>
              <Option value="meet">Có link Meet</Option>
            </Select>
          </Form.Item>

          <Form.Item
            name="teacherId"
            label="ID giáo viên"
            rules={[{ required: true, message: 'Vui lòng chọn giáo viên!' }]}
          >
            <Select placeholder="Chọn giáo viên">
              {teachers.map(teacher => (
                <Option key={teacher.id} value={teacher.id.toString()}>{teacher.name} (ID: {teacher.id})</Option>
              ))}
            </Select>
          </Form.Item>

          <Form.Item>
            <Button type="primary" htmlType="submit" loading={loading} style={{ width: '100%', height: 44, fontSize: 16, fontWeight: 500 }}>
              Tạo Lịch Học
            </Button>
          </Form.Item>
        </Form>
      </Card>
    </div>
  );
}

export default CreateSchedulePage;
