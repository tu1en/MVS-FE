import React, { useState, useEffect } from 'react';
import { 
  Card, 
  Tabs, 
  Table, 
  Button, 
  Space, 
  message, 
  Modal, 
  Form, 
  Input, 
  Select, 
  DatePicker, 
  InputNumber,
  Tag,
  Popconfirm,
  Tooltip
} from 'antd';
import { 
  PlusOutlined, 
  EditOutlined, 
  DeleteOutlined, 
  EyeOutlined,
  UserOutlined,
  TeamOutlined,
  FilePdfOutlined,
  CheckOutlined
} from '@ant-design/icons';
import axiosInstance from '../../config/axiosInstance';
import moment from 'moment';
import './ContractManagement.css';
import WorkingScheduleFields from '../../components/WorkingScheduleFields';
import ContractPDFGenerator from '../../utils/ContractPDFGenerator';

const { TabPane } = Tabs;
const { Option } = Select;
const { TextArea } = Input;

const ContractManagement = () => {
  const [teacherContracts, setTeacherContracts] = useState([]);
  const [staffContracts, setStaffContracts] = useState([]);
  const [candidatesReady, setCandidatesReady] = useState([]);
  const [loading, setLoading] = useState(false);
  const [candidateModalVisible, setCandidateModalVisible] = useState(false);
  const [editingContract, setEditingContract] = useState(null);
  const [selectedCandidate, setSelectedCandidate] = useState(null);
  const [candidatePosition, setCandidatePosition] = useState('');
  const [searchText, setSearchText] = useState('');
  const [filteredTeacherContracts, setFilteredTeacherContracts] = useState([]);
  const [filteredStaffContracts, setFilteredStaffContracts] = useState([]);
  const [candidateForm] = Form.useForm();
  const [editForm] = Form.useForm();
  const [editModalVisible, setEditModalVisible] = useState(false);
  const [renewModalVisible, setRenewModalVisible] = useState(false);
  const [renewingContract, setRenewingContract] = useState(null);
  const [renewForm] = Form.useForm();
  const [completedContracts, setCompletedContracts] = useState(new Set());

  // Fetch data khi component mount
  useEffect(() => {
    fetchContracts();
    fetchCandidatesReady();
  }, []);

  // Filter contracts when data changes
  useEffect(() => {
    filterContracts(searchText);
  }, [teacherContracts, staffContracts, searchText]);

  // L·∫•y danh s√°ch h·ª£p ƒë·ªìng theo lo·∫°i
  const fetchContracts = async () => {
    setLoading(true);
    try {
      const [teacherResponse, staffResponse] = await Promise.all([
        axiosInstance.get('/contracts/type/TEACHER'),
        axiosInstance.get('/contracts/type/STAFF')
      ]);
      
      setTeacherContracts(teacherResponse.data);
      setStaffContracts(staffResponse.data);
      setFilteredTeacherContracts(teacherResponse.data);
      setFilteredStaffContracts(staffResponse.data);
    } catch (error) {
      console.error('Error fetching contracts:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch h·ª£p ƒë·ªìng!');
    } finally {
      setLoading(false);
    }
  };

  // L·∫•y danh s√°ch ·ª©ng vi√™n ƒë√£ ƒë∆∞·ª£c duy·ªát
  const fetchCandidatesReady = async () => {
    try {
      const response = await axiosInstance.get('/contracts/candidates/ready');
      setCandidatesReady(response.data);
    } catch (error) {
      console.error('Error fetching candidates:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ·ª©ng vi√™n ƒë√£ ƒë∆∞·ª£c duy·ªát!');
    }
  };

  // üîÑ REFACTORED: X·ª≠ l√Ω t·∫°o h·ª£p ƒë·ªìng m·ªõi v·ªõi mutually exclusive salary fields
  const handleCreateContract = async (values) => {
    console.log('üîÑ REFACTORED: Creating contract with mutually exclusive salary values:', values);
    
    // Validate required fields
    if (!values.fullName || values.fullName.trim() === '') {
      message.error('Vui l√≤ng nh·∫≠p h·ªç t√™n!');
      return;
    }
    if (!values.email || values.email.trim() === '') {
      message.error('Vui l√≤ng nh·∫≠p email!');
      return;
    }
    if (!values.position || values.position.trim() === '') {
      message.error('Vui l√≤ng nh·∫≠p v·ªã tr√≠ c√¥ng vi·ªác!');
      return;
    }
    
    // üîÑ NEW: Validate mutually exclusive salary logic
    const hasHourly = values.hourlySalary && values.hourlySalary > 0;
    const hasGross = values.grossSalary && values.grossSalary > 0;
    const hasNet = values.netSalary && values.netSalary > 0;
    const hasGrossOrNet = hasGross || hasNet;
    
    if (!hasHourly && !hasGrossOrNet) {
      message.error('Vui l√≤ng c√≥ √≠t nh·∫•t m·ªôt lo·∫°i l∆∞∆°ng (theo gi·ªù ho·∫∑c GROSS/NET)!');
      return;
    }
    
    if (hasHourly && hasGrossOrNet) {
      message.error('Kh√¥ng th·ªÉ c√≥ c·∫£ l∆∞∆°ng theo gi·ªù v√† l∆∞∆°ng GROSS/NET c√πng l√∫c!');
      return;
    }
    
    console.log('üîç SALARY VALIDATION PASSED:', {
      hasHourly,
      hasGross,
      hasNet,
      hasGrossOrNet
    });
    if (!values.startDate) {
      message.error('Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu!');
      return;
    }
    if (values.endDate && values.endDate.isBefore(values.startDate, 'day')) {
      message.error('Ng√†y k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c tr∆∞·ªõc ng√†y b·∫Øt ƒë·∫ßu!');
      return;
    }
    if (values.endDate && values.endDate.isBefore(moment(), 'day')) {
      message.error('Ng√†y k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c l√† ng√†y trong qu√° kh·ª©!');
      return;
    }
    
    try {
      // Generate userId if not provided (for manual contract creation)
      let userId = values.userId;
      if (!userId && selectedCandidate) {
        userId = selectedCandidate.userId || selectedCandidate.id;
      }
      if (!userId) {
        // Generate a temporary userId for manual contracts
        userId = Date.now(); // Simple timestamp-based ID
      }

      // üîÑ REFACTORED: Handle salary based on mutually exclusive fields
    let finalSalary = 0;
    let salaryType = '';
    
    if (hasHourly) {
      // For hourly salary, estimate monthly: hourly * 80 hours
      finalSalary = values.hourlySalary * 80;
      salaryType = 'Hourly';
      console.log('üí∞ HOURLY SALARY: ', values.hourlySalary, 'VND/hour, Estimated Monthly:', finalSalary);
    } else if (hasGross) {
      // Use gross salary
      finalSalary = values.grossSalary;
      salaryType = 'Gross';
      console.log('üí∞ GROSS SALARY:', finalSalary, 'VND/month');
    } else if (hasNet) {
      // Use net salary
      finalSalary = values.netSalary;
      salaryType = 'Net';
      console.log('üí∞ NET SALARY:', finalSalary, 'VND/month');
    }    
      
      // üîÑ REFACTORED: Enhanced contract data with mutually exclusive salary fields
      const contractData = {
        contractId: values.contractId,
        userId: userId,
        fullName: values.fullName,
        email: values.email,
        phoneNumber: values.phoneNumber || '',
        address: values.address || '',
        birthDate: values.birthDate ? values.birthDate.format('YYYY-MM-DD') : null,
        position: values.position,
        department: values.department || 'Ph√≤ng Gi√°o v·ª•',
        contractType: values.contractType || 'STAFF',
        salary: finalSalary, // Main salary field for compatibility
        workingHours: values.workingHours || 'ca s√°ng (7:30-9:30)',
        startDate: values.startDate ? values.startDate.format('YYYY-MM-DD') : moment().format('YYYY-MM-DD'),
        endDate: values.endDate ? values.endDate.format('YYYY-MM-DD') : moment().add(2, 'years').format('YYYY-MM-DD'),
        status: values.status || 'ACTIVE',
        contractTerms: values.contractTerms || 'ƒêi·ªÅu kho·∫£n h·ª£p ƒë·ªìng chu·∫©n',
        comments: values.comments || 'H·ª£p ƒë·ªìng ƒë∆∞·ª£c t·∫°o t·ª´ ·ª©ng vi√™n ƒë√£ duy·ªát',
        // üîÑ REFACTORED: Mutually exclusive salary fields - ch·ªâ m·ªôt trong ba c√≥ gi√° tr·ªã
        hourlySalary: hasHourly ? values.hourlySalary : null,
        grossSalary: hasGross ? values.grossSalary : null,
        netSalary: hasNet ? values.netSalary : null,
        salaryType: salaryType // Additional info for logging
      };

      console.log('üîÑ REFACTORED: Sending contract creation request with mutually exclusive salary data:', contractData);
      console.log('üîÑ REWRITTEN: Salary field breakdown:', {
        salary: contractData.salary,
        hourlySalary: contractData.hourlySalary,
        grossSalary: contractData.grossSalary,
        netSalary: contractData.netSalary
      });

      await axiosInstance.post('/contracts', contractData);
      message.success(`T·∫°o h·ª£p ƒë·ªìng th√†nh c√¥ng cho ${values.fullName} v·ªõi l∆∞∆°ng ${salaryType}!`);
      setCandidateModalVisible(false);
      candidateForm.resetFields();
      setSelectedCandidate(null);
      fetchContracts();
      fetchCandidatesReady();
    } catch (error) {
      console.error('üîÑ REFACTORED Error creating contract:', error);
      message.error('C√≥ l·ªói x·∫£y ra khi t·∫°o h·ª£p ƒë·ªìng!');
    }
  };

  // X·ª≠ l√Ω c·∫≠p nh·∫≠t h·ª£p ƒë·ªìng
  const handleUpdateContract = async (values) => {
    if (values.endDate && values.endDate.isBefore(values.startDate, 'day')) {
      message.error('Ng√†y k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c tr∆∞·ªõc ng√†y b·∫Øt ƒë·∫ßu!');
      return;
    }
    try {
      const contractData = {
        ...values,
        startDate: values.startDate ? values.startDate.format('YYYY-MM-DD') : null,
        endDate: values.endDate ? values.endDate.format('YYYY-MM-DD') : null,
        birthDate: values.birthDate ? values.birthDate.format('YYYY-MM-DD') : null,
        citizenId: values.cccd || values.citizenId || '',
        // Format working schedule fields for backend
        workShifts: Array.isArray(values.workShifts) ? values.workShifts.join(',') : (values.workShifts || ''),
        workDays: Array.isArray(values.workDays) ? values.workDays.join(',') : (values.workDays || ''),
        workSchedule: values.workSchedule || ''
      };

      await axiosInstance.put(`/contracts/${editingContract.id}`, contractData);
      message.success('C·∫≠p nh·∫≠t h·ª£p ƒë·ªìng th√†nh c√¥ng!');
      setModalVisible(false);
      setEditingContract(null);
      form.resetFields();
      fetchContracts();
    } catch (error) {
      console.error('Error updating contract:', error);
      message.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t h·ª£p ƒë·ªìng!');
    }
  };

  // X·ª≠ l√Ω ƒë√°nh d·∫•u h·ª£p ƒë·ªìng ho√†n th√†nh (ch·ªâ ·∫©n n√∫t, kh√¥ng thay ƒë·ªïi tr·∫°ng th√°i)
  const handleCompleteContract = async (id) => {
    try {
      // Ch·ªâ ƒë√°nh d·∫•u local ƒë·ªÉ ·∫©n n√∫t, kh√¥ng thay ƒë·ªïi tr·∫°ng th√°i h·ª£p ƒë·ªìng
      setCompletedContracts(prev => new Set([...prev, id]));
      message.success('ƒê√£ ƒë√°nh d·∫•u h·ª£p ƒë·ªìng ho√†n th√†nh!');
    } catch (error) {
      console.error('Error marking contract as completed:', error);
      message.error('Kh√¥ng th·ªÉ ƒë√°nh d·∫•u h·ª£p ƒë·ªìng ho√†n th√†nh!');
    }
  };

  // X·ª≠ l√Ω gia h·∫°n h·ª£p ƒë·ªìng
  const handleRenewContract = (record) => {
    console.log('Renewing contract:', record);
    setRenewingContract(record);
    
    // Populate form with current contract dates
    renewForm.setFieldsValue({
      contractId: record.contractId,
      fullName: record.fullName,
      startDate: record.startDate ? moment(record.startDate) : null,
      endDate: record.endDate ? moment(record.endDate) : null
    });
    
    setRenewModalVisible(true);
  };

  // X·ª≠ l√Ω c·∫≠p nh·∫≠t ng√†y h·ª£p ƒë·ªìng (gia h·∫°n)
  const handleRenewContractSubmit = async (values) => {
    try {
      const renewData = {
        startDate: values.startDate.format('YYYY-MM-DD'),
        endDate: values.endDate.format('YYYY-MM-DD')
      };
      
      await axiosInstance.put(`/contracts/${renewingContract.id}`, renewData);
      message.success('Gia h·∫°n h·ª£p ƒë·ªìng th√†nh c√¥ng!');
      setRenewModalVisible(false);
      setRenewingContract(null);
      renewForm.resetFields();
      fetchContracts();
    } catch (error) {
      console.error('Error renewing contract:', error);
      message.error('Kh√¥ng th·ªÉ gia h·∫°n h·ª£p ƒë·ªìng!');
    }
  };

  // X·ª≠ l√Ω ch·ªânh s·ª≠a h·ª£p ƒë·ªìng
  const handleEditContract = (record) => {
    if (record.status === 'EXPIRED') {
      message.warning('Kh√¥ng th·ªÉ ch·ªânh s·ª≠a h·ª£p ƒë·ªìng ƒë√£ h·∫øt h·∫°n!');
      return;
    }
    
    console.log('üîç DEBUG: Editing contract:', record);
    console.log('üîç DEBUG: Contract salary fields:', {
      grossSalary: record.grossSalary,
      netSalary: record.netSalary,
      hourlySalary: record.hourlySalary,
    });
    console.log('üîç DEBUG: Contract type:', record.contractType);
    
    setEditingContract(record);
    
    // Populate form with contract data
    editForm.setFieldsValue({
      contractId: record.contractId,
      fullName: record.fullName,
      email: record.email,
      phoneNumber: record.phoneNumber,
      position: record.position,
      birthDate: record.birthDate ? moment(record.birthDate) : null,
      citizenId: record.citizenId,
      address: record.address,
      qualification: record.qualification,
      subject: record.subject,
      educationLevel: record.educationLevel,
      startDate: record.startDate ? moment(record.startDate) : null,
      endDate: record.endDate ? moment(record.endDate) : null,
      status: record.status,
      contractTerms: record.contractTerms,
      evaluation: record.evaluation,
    });
    
    setEditModalVisible(true);
  };

  // Generate Contract ID based on current date and sequence
  const generateContractId = () => {
    const today = new Date();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const year = String(today.getFullYear()).slice(-2);
    // For demo purposes, we'll use a simple sequence. In production, this should come from backend
    const sequence = String(Math.floor(Math.random() * 99) + 1).padStart(2, '0');
    return `${sequence}${month}${year}`;
  };

  // üîÑ REFACTORED: M·ªü modal t·∫°o h·ª£p ƒë·ªìng v·ªõi logic l∆∞∆°ng mutually exclusive
  const handleSelectCandidate = async (candidate) => {
    console.log('üîÑ REFACTORED: Selected candidate for contract creation:', candidate);
    setSelectedCandidate(candidate);
    setCandidateModalVisible(true);
    
    // Reset form tr∆∞·ªõc khi set d·ªØ li·ªáu m·ªõi
    candidateForm.resetFields();
    
    try {
      // L·∫•y d·ªØ li·ªáu offer t·ª´ backend (v·ªõi logic mutually exclusive salary)
      console.log('üîÑ REFACTORED: Fetching mutually exclusive salary data for candidate ID:', candidate.id);
      const response = await axiosInstance.get(`/contracts/candidates/${candidate.id}/offer-data`);
      const offerData = response.data;
      
      console.log('üîÑ REFACTORED: Received mutually exclusive salary data:', offerData);
      
      // X√°c ƒë·ªãnh lo·∫°i h·ª£p ƒë·ªìng d·ª±a tr√™n v·ªã tr√≠ (v·∫´n c·∫ßn cho contractType)
      const jobTitle = candidate.jobTitle ? candidate.jobTitle.toLowerCase() : '';
      let contractType = 'STAFF'; // Default
      
      if (jobTitle.includes('gi√°o vi√™n') || jobTitle.includes('teacher')) {
        contractType = 'TEACHER';
      } else if (jobTitle.includes('k·∫ø to√°n') || jobTitle.includes('accountant')) {
        contractType = 'ACCOUNTANT';
      } else if (jobTitle.includes('qu·∫£n l√Ω') || jobTitle.includes('manager')) {
        contractType = 'MANAGER';
      }
      
      // Generate Contract ID
      const contractId = generateContractId();
      
      // üîÑ NEW: Validate mutually exclusive salary logic
      const hasHourly = offerData.hourlySalary && offerData.hourlySalary > 0;
      const hasGross = offerData.grossSalary && offerData.grossSalary > 0;
      const hasNet = offerData.netSalary && offerData.netSalary > 0;
      
      console.log('üîç SALARY VALIDATION:', {
        hasHourly,
        hasGross, 
        hasNet,
        hourlySalary: offerData.hourlySalary,
        grossSalary: offerData.grossSalary,
        netSalary: offerData.netSalary
      });
      
      // ƒêi·ªÅn th√¥ng tin c∆° b·∫£n v√†o form
      candidateForm.setFieldsValue({
        contractId: contractId,
        userId: candidate.id,
        fullName: candidate.fullName,
        email: candidate.email,
        phoneNumber: candidate.phoneNumber || '',
        address: candidate.address || '',
        birthDate: candidate.birthDate ? moment(candidate.birthDate) : undefined,
        position: candidate.jobTitle,
        department: 'Ph√≤ng Gi√°o v·ª•', // Default department
        contractType: contractType,
        status: 'ACTIVE',
        // üîÑ REFACTORED: Mutually exclusive salary data t·ª´ backend
        comments: offerData.comments || 'Ch∆∞a c√≥ nh·∫≠n x√©t',
        // Backend ƒë√£ ƒë·∫£m b·∫£o ch·ªâ m·ªôt lo·∫°i l∆∞∆°ng c√≥ gi√° tr·ªã, c√°c lo·∫°i kh√°c s·∫Ω l√† null
        hourlySalary: offerData.hourlySalary,
        grossSalary: offerData.grossSalary,
        netSalary: offerData.netSalary
      });
      
      console.log('üîÑ REFACTORED: Form populated with mutually exclusive salary data.');
      
    } catch (error) {
      console.error('üîÑ REFACTORED Error fetching offer data:', error);
      message.error('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu offer cho ·ª©ng vi√™n n√†y!');
      
      // Fallback: ƒëi·ªÅn th√¥ng tin c∆° b·∫£n kh√¥ng c√≥ offer data
      const contractId = generateContractId();
      candidateForm.setFieldsValue({
        contractId: contractId,
        userId: candidate.id,
        fullName: candidate.fullName,
        email: candidate.email,
        phoneNumber: candidate.phoneNumber || '',
        address: candidate.address || '',
        birthDate: candidate.birthDate ? moment(candidate.birthDate) : undefined,
        position: candidate.jobTitle,
        department: 'Ph√≤ng Gi√°o v·ª•',
        contractType: contractType,
        status: 'ACTIVE',
        comments: 'Ch∆∞a c√≥ nh·∫≠n x√©t',
        // T·∫•t c·∫£ salary fields ƒë·ªÉ null khi c√≥ l·ªói
        hourlySalary: null,
        grossSalary: null,
        netSalary: null
      });
    }
  };

  // H√†m t√¨m ki·∫øm v√† l·ªçc h·ª£p ƒë·ªìng
  const handleSearch = (value) => {
    setSearchText(value);
    filterContracts(value);
  };

  const filterContracts = (searchValue) => {
    const filterData = (contracts) => {
      if (!searchValue) return contracts;
      
      return contracts.filter(contract => {
        const fullName = contract.fullName?.toLowerCase() || '';
        const contractId = contract.contractId?.toString() || '';
        const last4Digits = contractId.slice(-4);
        const searchLower = searchValue.toLowerCase();
        
        return fullName.includes(searchLower) || last4Digits.includes(searchLower);
      });
    };
    
    setFilteredTeacherContracts(filterData(teacherContracts));
    setFilteredStaffContracts(filterData(staffContracts));
  };



  // H√†m validate ng√†y sinh (√≠t nh·∫•t 20 tu·ªïi) - ƒê√£ b·ªè validate tu·ªïi theo y√™u c·∫ßu
  const validateBirthDate = (_, value) => {
    if (!value) {
      return Promise.reject(new Error('Vui l√≤ng ch·ªçn ng√†y sinh'));
    }
    return Promise.resolve();
  };

  // Xem h·ª£p ƒë·ªìng d∆∞·ªõc d·∫°ng PDF
  const handleViewContractPDF = (contract) => {
    try {
      ContractPDFGenerator.generateContractPDF(contract);
    } catch (error) {
      console.error('Error generating PDF:', error);
      message.error('Kh√¥ng th·ªÉ t·∫°o file PDF h·ª£p ƒë·ªìng!');
    }
  };

  // C·∫•u h√¨nh c·ªôt cho b·∫£ng h·ª£p ƒë·ªìng
  const contractColumns = [
    {
      title: 'ID H·ª£p ƒë·ªìng',
      dataIndex: 'contractId',
      key: 'contractId',
      width: 120,
      render: (text) => <strong style={{ color: '#1890ff' }}>{text}</strong>
    },
    {
      title: 'H·ªç t√™n',
      dataIndex: 'fullName',
      key: 'fullName',
      render: (text) => <strong>{text}</strong>
    },

    {
      title: 'Email',
      dataIndex: 'email',
      key: 'email'
    },
    {
      title: 'S·ªë ƒëi·ªán tho·∫°i',
      dataIndex: 'phoneNumber',
      key: 'phoneNumber'
    },
    {
      title: 'V·ªã tr√≠',
      dataIndex: 'position',
      key: 'position'
    },

    {
      title: 'L∆∞∆°ng',
      dataIndex: 'salary',
      key: 'salary',
      render: (salary) => salary ? `${salary.toLocaleString()} VNƒê` : 'Ch∆∞a x√°c ƒë·ªãnh'
    },
    {
      title: 'Ng√†y b·∫Øt ƒë·∫ßu',
      dataIndex: 'startDate',
      key: 'startDate',
      render: (date) => date ? moment(date).format('DD/MM/YYYY') : 'N/A'
    },
    {
      title: 'Tr·∫°ng th√°i',
      dataIndex: 'status',
      key: 'status',
      render: (status) => {
        let color = 'blue';
        let text = status;
        
        switch(status) {
          case 'ACTIVE':
            color = 'green';
            text = 'ƒêang ho·∫°t ƒë·ªông';
            break;
          case 'NEAR_EXPIRY':
            color = 'orange';
            text = 'S·∫Øp h·∫øt h·∫°n';
            break;
          case 'EXPIRED':
            color = 'red';
            text = 'H·∫øt h·∫°n';
            break;
          default:
            color = 'blue';
            text = status;
        }
        
        return <Tag color={color}>{text}</Tag>;
      }
    },
    {
      title: 'Thao t√°c',
      key: 'action',
      render: (_, record) => (
        <Space size="middle">
          <Tooltip title="Xem h·ª£p ƒë·ªìng PDF">
            <Button 
              icon={<FilePdfOutlined />} 
              size="small" 
              onClick={() => handleViewContractPDF(record)}
              style={{ color: '#1890ff' }}
            />
          </Tooltip>
          <Tooltip title="Ch·ªânh s·ª≠a">
            <Button 
              icon={<EditOutlined />} 
              size="small" 
              onClick={() => handleEditContract(record)}
              disabled={record.status === 'EXPIRED' || completedContracts.has(record.id)}
              style={{
                backgroundColor: (record.status === 'EXPIRED' || completedContracts.has(record.id)) ? '#d9d9d9' : undefined,
                borderColor: (record.status === 'EXPIRED' || completedContracts.has(record.id)) ? '#d9d9d9' : undefined,
                color: (record.status === 'EXPIRED' || completedContracts.has(record.id)) ? '#999' : undefined
              }}
              title={
                record.status === 'EXPIRED' ? 'Kh√¥ng th·ªÉ ch·ªânh s·ª≠a h·ª£p ƒë·ªìng ƒë√£ h·∫øt h·∫°n' :
                completedContracts.has(record.id) ? 'Kh√¥ng th·ªÉ ch·ªânh s·ª≠a h·ª£p ƒë·ªìng ƒë√£ ho√†n th√†nh' :
                'Ch·ªânh s·ª≠a h·ª£p ƒë·ªìng'
              }
            />
          </Tooltip>
          {record.status === 'NEAR_EXPIRY' && (
            <Tooltip title="Gia h·∫°n h·ª£p ƒë·ªìng">
              <Button 
                icon={<PlusOutlined />} 
                size="small" 
                onClick={() => handleRenewContract(record)}
                style={{ color: '#fa8c16' }}
              />
            </Tooltip>
          )}
          {!completedContracts.has(record.id) && (record.status === 'ACTIVE' || record.status === 'NEAR_EXPIRY') && (
            <Popconfirm
              title="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë√°nh d·∫•u h·ª£p ƒë·ªìng n√†y ƒë√£ ho√†n th√†nh?"
              onConfirm={() => handleCompleteContract(record.id)}
              okText="C√≥"
              cancelText="Kh√¥ng"
            >
              <Tooltip title="ƒê√°nh d·∫•u ho√†n th√†nh">
                <Button 
                  icon={<CheckOutlined />} 
                  size="small" 
                  style={{ color: '#52c41a' }}
                />
              </Tooltip>
            </Popconfirm>
          )}
        </Space>
      ),
    }
  ];

  // C·∫•u h√¨nh c·ªôt cho b·∫£ng ·ª©ng vi√™n ƒë√£ duy·ªát
  const candidateColumns = [
    {
      title: 'H·ªç t√™n',
      dataIndex: 'fullName',
      key: 'fullName',
      render: (text) => <strong>{text}</strong>
    },
    {
      title: 'Email',
      dataIndex: 'email',
      key: 'email'
    },
    {
      title: 'S·ªë ƒëi·ªán tho·∫°i',
      dataIndex: 'phoneNumber',
      key: 'phoneNumber'
    },
    {
      title: 'V·ªã tr√≠ ·ª©ng tuy·ªÉn',
      dataIndex: 'position',
      key: 'position'
    },

    {
      title: 'Thao t√°c',
      key: 'actions',
      render: (_, record) => (
        <Button 
          type="primary" 
          icon={<PlusOutlined />}
          onClick={() => handleSelectCandidate(record)}
        >
          T·∫°o h·ª£p ƒë·ªìng
        </Button>
      )
    }
  ];

  return (
    <div className="contract-management">
      <Card title="Qu·∫£n l√Ω H·ª£p ƒë·ªìng" className="contract-card">
        <div style={{ marginBottom: 16 }}>
          <Input.Search
            placeholder="T√¨m ki·∫øm theo t√™n ho·∫∑c 4 s·ªë cu·ªëi ID h·ª£p ƒë·ªìng"
            value={searchText}
            onChange={(e) => handleSearch(e.target.value)}
            onSearch={handleSearch}
            style={{ width: 400 }}
            allowClear
          />
        </div>
        <Tabs defaultActiveKey="teachers" className="contract-tabs">
          <TabPane 
            tab={<span><UserOutlined /> H·ª£p ƒë·ªìng Gi√°o vi√™n ({teacherContracts.length})</span>} 
            key="teachers"
          >
            <Table
              columns={contractColumns}
              dataSource={filteredTeacherContracts}
              rowKey="id"
              loading={loading}
              pagination={{ 
                pageSize: 10, 
                showSizeChanger: true, 
                showTotal: (total) => `T·ªïng ${total} h·ª£p ƒë·ªìng` 
              }}
            />
          </TabPane>

          <TabPane 
            tab={<span><TeamOutlined /> H·ª£p ƒë·ªìng Nh√¢n vi√™n ({staffContracts.length})</span>} 
            key="staff"
          >
            <Table
              columns={contractColumns}
              dataSource={filteredStaffContracts}
              rowKey="id"
              loading={loading}
              pagination={{ 
                pageSize: 10, 
                showSizeChanger: true, 
                showTotal: (total) => `T·ªïng ${total} h·ª£p ƒë·ªìng` 
              }}
            />
          </TabPane>

          <TabPane 
            tab={<span><PlusOutlined /> T·∫°o h·ª£p ƒë·ªìng t·ª´ ·ª©ng vi√™n ƒë√£ duy·ªát ({candidatesReady.length})</span>} 
            key="create"
          >
            <Card title="Danh s√°ch ·ª©ng vi√™n ƒë√£ ƒë∆∞·ª£c duy·ªát" className="candidates-card">
              <Table
                columns={candidateColumns}
                dataSource={candidatesReady}
                rowKey="email"
                pagination={{ 
                  pageSize: 10, 
                  showTotal: (total) => `T·ªïng ${total} ·ª©ng vi√™n` 
                }}
              />
            </Card>
          </TabPane>
        </Tabs>
      </Card>

      {/* Modal ch·ªânh s·ª≠a h·ª£p ƒë·ªìng */}
      <Modal
        title="Ch·ªânh s·ª≠a h·ª£p ƒë·ªìng"
        visible={editModalVisible}
        onCancel={() => {
          setEditModalVisible(false);
          setEditingContract(null);
          editForm.resetFields();
        }}
        footer={null}
        width={800}
      >
        <Form
          form={editForm}
          layout="vertical"
          onFinish={handleUpdateContract}
        >
          <Form.Item name="contractId" label="ID H·ª£p ƒë·ªìng">
            <Input 
              placeholder="T·ª± ƒë·ªông t·∫°o" 
              readOnly 
              style={{ 
                backgroundColor: '#f0f8ff', 
                border: '1px solid #1890ff',
                color: '#1890ff',
                fontWeight: 'bold'
              }} 
            />
          </Form.Item>

          <Form.Item name="fullName" label="H·ªç v√† t√™n">
            <Input 
              placeholder="Nh·∫≠p h·ªç v√† t√™n" 
              readOnly={editingContract}
              style={editingContract ? {
                backgroundColor: '#f5f5f5',
                color: '#666',
                cursor: 'not-allowed'
              } : {}}
            />
          </Form.Item>

          <Form.Item 
            name="birthDate" 
            label="Ng√†y sinh" 
            rules={[
              { required: true, message: 'Vui l√≤ng ch·ªçn ng√†y sinh' },
              { validator: validateBirthDate }
            ]}
          > 
            <DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" placeholder="Ch·ªçn ng√†y sinh" />
          </Form.Item>

          <Form.Item name="email" label="Email" rules={[{ required: true, type: 'email', message: 'Vui l√≤ng nh·∫≠p email h·ª£p l·ªá!' }]}>
            <Input 
              placeholder="Nh·∫≠p email" 
              readOnly={editingContract}
              style={editingContract ? {
                backgroundColor: '#f5f5f5',
                color: '#666',
                cursor: 'not-allowed'
              } : {}}
            />
          </Form.Item>

          <Form.Item name="phoneNumber" label="S·ªë ƒëi·ªán tho·∫°i">
            <Input 
              placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" 
              readOnly={editingContract}
              style={editingContract ? {
                backgroundColor: '#f5f5f5',
                color: '#666',
                cursor: 'not-allowed'
              } : {}}
            />
          </Form.Item>

          <Form.Item name="cccd" label="S·ªë CCCD" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë CCCD!' }, { pattern: /^\d{12}$/, message: 'S·ªë CCCD ph·∫£i c√≥ ƒë√∫ng 12 ch·ªØ s·ªë!' }]}>
            <Input placeholder="Nh·∫≠p s·ªë CCCD (12 s·ªë)" maxLength={12} />
          </Form.Item>

          <Form.Item name="address" label="ƒê·ªãa ch·ªâ" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!' }]}>
            <Input placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ" />
          </Form.Item>

          <Form.Item name="qualification" label="Tr√¨nh ƒë·ªô chuy√™n m√¥n" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p tr√¨nh ƒë·ªô chuy√™n m√¥n!' }]}>
            <Input placeholder="Nh·∫≠p tr√¨nh ƒë·ªô chuy√™n m√¥n" />
          </Form.Item>

          {/* Subject and Class Level fields - Only for Teachers */}
          {(() => {
            // For edit mode, check the editing contract's type and position
            const isTeacher = editingContract ? 
              (editingContract.contractType === 'TEACHER' || 
               editingContract.position?.toLowerCase().includes('gi√°o vi√™n')) :
              (candidatePosition.toLowerCase().includes('gi√°o vi√™n') || 
               candidatePosition.toLowerCase().includes('teacher'));
            
            if (isTeacher) {
              return (
                <>
                  <Form.Item name="subject" label="M√¥n gi·∫£ng d·∫°y" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m√¥n gi·∫£ng d·∫°y!' }]}>
                    <Input placeholder="Nh·∫≠p m√¥n gi·∫£ng d·∫°y" />
                  </Form.Item>

                  <Form.Item name="classLevel" label="L·ªõp h·ªçc" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p l·ªõp h·ªçc!' }]}>
                    <Input placeholder="Nh·∫≠p l·ªõp h·ªçc" />
                  </Form.Item>
                </>
              );
            }
            return null; // Don't show for HR/Accountant staff
          })()}

          {/* Working Schedule Fields - Only for Teachers in Edit Mode */}
          {(() => {
            // For edit mode, check the editing contract's type and position
            const isTeacher = editingContract ? 
              (editingContract.contractType === 'TEACHER' || 
               editingContract.position?.toLowerCase().includes('gi√°o vi√™n')) :
              (candidatePosition.toLowerCase().includes('gi√°o vi√™n') || 
               candidatePosition.toLowerCase().includes('teacher'));
            
            if (isTeacher) {
              return (
                <>
                  <Form.Item 
                    name="workShifts" 
                    label="Ca l√†m vi·ªác" 
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ca l√†m vi·ªác!' }]}
                  >
                    <Select 
                      mode="multiple" 
                      placeholder="Ch·ªçn ca l√†m vi·ªác"
                      options={[
                        { value: 'morning', label: 'Ca s√°ng (7:30 - 9:30)' },
                        { value: 'afternoon', label: 'Ca chi·ªÅu (14:00 - 17:00)' },
                        { value: 'evening', label: 'Ca t·ªëi (17:00 - 21:00)' }
                      ]}
                    />
                  </Form.Item>

                  <Form.Item 
                    name="workDays" 
                    label="Ng√†y trong tu·∫ßn" 
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y l√†m vi·ªác!' }]}
                  >
                    <Select 
                      mode="multiple" 
                      placeholder="Ch·ªçn ng√†y trong tu·∫ßn"
                      options={[
                        { value: 'monday', label: 'Th·ª© 2' },
                        { value: 'tuesday', label: 'Th·ª© 3' },
                        { value: 'wednesday', label: 'Th·ª© 4' },
                        { value: 'thursday', label: 'Th·ª© 5' },
                        { value: 'friday', label: 'Th·ª© 6' },
                        { value: 'saturday', label: 'Th·ª© 7' },
                        { value: 'sunday', label: 'Ch·ªß nh·∫≠t' }
                      ]}
                    />
                  </Form.Item>

                  <Form.Item name="workSchedule" label="Th·ªùi gian l√†m vi·ªác chi ti·∫øt">
                    <Input.TextArea 
                      rows={3} 
                      placeholder="M√¥ t·∫£ chi ti·∫øt th·ªùi gian l√†m vi·ªác (v√≠ d·ª•: Th·ª© 2, 4, 6 - Ca s√°ng v√† chi·ªÅu)"
                    />
                  </Form.Item>
                </>
              );
            }
            return null; // Don't show for HR/Accountant staff
          })()}

          <Form.Item name="position" label="V·ªã tr√≠" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p v·ªã tr√≠!' }]}>
            <Input 
              placeholder="Nh·∫≠p v·ªã tr√≠" 
              readOnly={editingContract}
              style={editingContract ? {
                backgroundColor: '#f5f5f5',
                color: '#666',
                cursor: 'not-allowed'
              } : {}}
            />
          </Form.Item>

          {/* Salary fields - only show in edit mode and read-only, based on contract type */}
          {editingContract && (
            <>
              {/* For Teacher Contracts: Show only Hourly Salary */}
              {(editingContract.contractType === 'TEACHER' || 
                editingContract.position?.toLowerCase().includes('gi√°o vi√™n')) && 
                editingContract.hourlySalary && (
                <Form.Item name="hourlySalary" label="L∆∞∆°ng theo gi·ªù">
                  <InputNumber
                    style={{ 
                      width: '100%',
                      backgroundColor: '#f5f5f5',
                      color: '#666',
                      cursor: 'not-allowed'
                    }}
                    formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                    parser={value => value.replace(/\$\s?|(,*)/g, '')}
                    readOnly
                    disabled
                  />
                </Form.Item>
              )}
              
              {/* For Staff Contracts: Show Gross and Net Salary */}
              {(editingContract.contractType === 'STAFF' || 
                !editingContract.position?.toLowerCase().includes('gi√°o vi√™n')) && (
                <>
                  {editingContract.grossSalary && (
                    <Form.Item name="grossSalary" label="L∆∞∆°ng GROSS">
                      <InputNumber
                        style={{ 
                          width: '100%',
                          backgroundColor: '#f5f5f5',
                          color: '#666',
                          cursor: 'not-allowed'
                        }}
                        formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                        parser={value => value.replace(/\$\s?|(,*)/g, '')}
                        readOnly
                        disabled
                      />
                    </Form.Item>
                  )}
                  {editingContract.netSalary && (
                    <Form.Item name="netSalary" label="L∆∞∆°ng NET">
                      <InputNumber
                        style={{ 
                          width: '100%',
                          backgroundColor: '#f5f5f5',
                          color: '#666',
                          cursor: 'not-allowed'
                        }}
                        formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                        parser={value => value.replace(/\$\s?|(,*)/g, '')}
                        readOnly
                        disabled
                      />
                    </Form.Item>
                  )}
                </>
              )}
            </>
          )}

          <Form.Item name="startDate" label="Ng√†y b·∫Øt ƒë·∫ßu" rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu!' }]}>
            <DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" />
          </Form.Item>

          <Form.Item name="endDate" label="Ng√†y k·∫øt th√∫c">
            <DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" />
          </Form.Item>

          <Form.Item name="contractTerms" label="ƒêi·ªÅu kho·∫£n h·ª£p ƒë·ªìng">
            <TextArea rows={4} placeholder="Nh·∫≠p ƒëi·ªÅu kho·∫£n h·ª£p ƒë·ªìng" />
          </Form.Item>

          <Form.Item>
            <Space>
              <Button type="primary" htmlType="submit">
                C·∫≠p nh·∫≠t h·ª£p ƒë·ªìng
              </Button>
              <Button onClick={() => {
                setEditModalVisible(false);
                setEditingContract(null);
                editForm.resetFields();
              }}>
                H·ªßy
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>

      {/* Modal t·∫°o h·ª£p ƒë·ªìng t·ª´ ·ª©ng vi√™n ƒë√£ duy·ªát */}
      <Modal
        title="T·∫°o h·ª£p ƒë·ªìng cho ·ª©ng vi√™n ƒë√£ duy·ªát"
        visible={candidateModalVisible}
        onCancel={() => {
          setCandidateModalVisible(false);
          setSelectedCandidate(null);
          candidateForm.resetFields();
        }}
        footer={null}
        width={800}
      >
        <Form
          form={candidateForm}
          layout="vertical"
          onFinish={handleCreateContract}
        >
          <Form.Item name="contractId" label="ID H·ª£p ƒë·ªìng">
            <Input 
              placeholder="T·ª± ƒë·ªông t·∫°o" 
              readOnly 
              style={{ 
                backgroundColor: '#f0f8ff', 
                border: '1px solid #1890ff',
                color: '#1890ff',
                fontWeight: 'bold'
              }} 
            />
          </Form.Item>

          <Form.Item name="fullName" label="H·ªç v√† t√™n">
            <Input placeholder="Nh·∫≠p h·ªç v√† t√™n" readOnly style={{ backgroundColor: '#f5f5f5' }} />
          </Form.Item>

          <Form.Item 
            name="birthDate" 
            label="Ng√†y sinh" 
            rules={[
              { required: true, message: 'Vui l√≤ng ch·ªçn ng√†y sinh' },
              { validator: validateBirthDate }
            ]}
          > 
            <DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" placeholder="Ch·ªçn ng√†y sinh" />
          </Form.Item>

          <Form.Item name="email" label="Email">
            <Input placeholder="Email" readOnly style={{ backgroundColor: '#f5f5f5' }} />
          </Form.Item>

          <Form.Item name="phoneNumber" label="S·ªë ƒëi·ªán tho·∫°i">
            <Input placeholder="S·ªë ƒëi·ªán tho·∫°i" readOnly style={{ backgroundColor: '#f5f5f5' }} />
          </Form.Item>

          <Form.Item name="cccd" label="S·ªë CCCD" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë CCCD!' }, { pattern: /^\d{12}$/, message: 'S·ªë CCCD ph·∫£i c√≥ ƒë√∫ng 12 ch·ªØ s·ªë!' }]}>
            <Input placeholder="Nh·∫≠p s·ªë CCCD (12 s·ªë)" maxLength={12} />
          </Form.Item>

          <Form.Item name="address" label="ƒê·ªãa ch·ªâ" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!' }]}>
            <Input placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ" />
          </Form.Item>

          <Form.Item name="qualification" label="Tr√¨nh ƒë·ªô chuy√™n m√¥n" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p tr√¨nh ƒë·ªô chuy√™n m√¥n!' }]}>
            <Input placeholder="Nh·∫≠p tr√¨nh ƒë·ªô chuy√™n m√¥n" />
          </Form.Item>

          {/* Subject and Class Level fields - Only for Teachers */}
          {(() => {
            const position = candidatePosition.toLowerCase();
            const isTeacher = position.includes('gi√°o vi√™n') || position.includes('teacher') || 
                             (selectedCandidate && selectedCandidate.contractType === 'TEACHER');
            
            if (isTeacher) {
              return (
                <>
                  <Form.Item name="subject" label="M√¥n gi·∫£ng d·∫°y" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m√¥n gi·∫£ng d·∫°y!' }]}>
                    <Input placeholder="Nh·∫≠p m√¥n gi·∫£ng d·∫°y" />
                  </Form.Item>

                  <Form.Item name="classLevel" label="L·ªõp h·ªçc" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p l·ªõp h·ªçc!' }]}>
                    <Input placeholder="Nh·∫≠p l·ªõp h·ªçc" />
                  </Form.Item>
                </>
              );
            }
            return null; // Don't show for HR/Accountant staff
          })()}

          {/* Working Schedule Fields - Only for Teachers */}
          {(() => {
            const position = candidatePosition.toLowerCase();
            const isTeacher = position.includes('gi√°o vi√™n') || position.includes('teacher') || 
                             (selectedCandidate && selectedCandidate.contractType === 'TEACHER');
            
            if (isTeacher) {
              return (
                <>
                  <Form.Item 
                    name="workShifts" 
                    label="Ca l√†m vi·ªác" 
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ca l√†m vi·ªác!' }]}
                  >
                    <Select 
                      mode="multiple" 
                      placeholder="Ch·ªçn ca l√†m vi·ªác"
                      options={[
                        { value: 'morning', label: 'Ca s√°ng (7:30 - 9:30)' },
                        { value: 'afternoon', label: 'Ca chi·ªÅu (14:00 - 17:00)' },
                        { value: 'evening', label: 'Ca t·ªëi (17:00 - 21:00)' }
                      ]}
                    />
                  </Form.Item>

                  <Form.Item 
                    name="workDays" 
                    label="Ng√†y trong tu·∫ßn" 
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y l√†m vi·ªác!' }]}
                  >
                    <Select 
                      mode="multiple" 
                      placeholder="Ch·ªçn ng√†y trong tu·∫ßn"
                      options={[
                        { value: 'monday', label: 'Th·ª© 2' },
                        { value: 'tuesday', label: 'Th·ª© 3' },
                        { value: 'wednesday', label: 'Th·ª© 4' },
                        { value: 'thursday', label: 'Th·ª© 5' },
                        { value: 'friday', label: 'Th·ª© 6' },
                        { value: 'saturday', label: 'Th·ª© 7' },
                        { value: 'sunday', label: 'Ch·ªß nh·∫≠t' }
                      ]}
                    />
                  </Form.Item>

                  <Form.Item name="workSchedule" label="Th·ªùi gian l√†m vi·ªác chi ti·∫øt">
                    <Input.TextArea 
                      rows={3} 
                      placeholder="M√¥ t·∫£ chi ti·∫øt th·ªùi gian l√†m vi·ªác (v√≠ d·ª•: Th·ª© 2, 4, 6 - Ca s√°ng v√† chi·ªÅu)"
                    />
                  </Form.Item>
                </>
              );
            }
          })()}

          <Form.Item name="position" label="V·ªã tr√≠">
            <Input placeholder="V·ªã tr√≠" readOnly style={{ backgroundColor: '#f5f5f5' }} />
          </Form.Item>

          <Form.Item 
            name="contractType" 
            label="Lo·∫°i h·ª£p ƒë·ªìng" 
            rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn lo·∫°i h·ª£p ƒë·ªìng!' }]}
          >
            <Select placeholder="Ch·ªçn lo·∫°i h·ª£p ƒë·ªìng">
              <Option value="TEACHER">Gi√°o vi√™n</Option>
              <Option value="STAFF">Nh√¢n vi√™n HR</Option>
              <Option value="STAFF">K·∫ø to√°n vi√™n</Option>
            </Select>
          </Form.Item>

          {/* Offer Management Fields - Read Only */}
          <Form.Item name="comments" label="Nh·∫≠n x√©t">
            <Input 
              placeholder="T·ª± ƒë·ªông l·∫•y t·ª´ Offer" 
              readOnly 
              style={{ 
                backgroundColor: '#f0f8ff', 
                border: '1px solid #52c41a',
                color: '#52c41a',
                fontWeight: 'bold'
              }} 
            />
          </Form.Item>

          {/* Conditional rendering based on position */}
          {(() => {
            const position = candidatePosition.toLowerCase();
            // ‚úÖ FIX: More robust teacher detection
            const isTeacher = position.includes('gi√°o vi√™n') || position.includes('teacher') || 
                             (selectedCandidate && selectedCandidate.contractType === 'TEACHER');
            console.log('Teacher detection - position:', position, 'isTeacher:', isTeacher, 'contractType:', selectedCandidate?.contractType);
            
            if (isTeacher) {
              // Teachers: only show hourly salary
              return (
                <Form.Item name="hourlySalary" label="L∆∞∆°ng theo gi·ªù">
                  <InputNumber
                    style={{ 
                      width: '100%',
                      backgroundColor: '#f0f8ff', 
                      border: '1px solid #52c41a',
                      color: '#52c41a',
                      fontWeight: 'bold'
                    }}
                    placeholder="L∆∞∆°ng theo gi·ªù cho Gi√°o vi√™n"
                    readOnly
                    formatter={value => value ? `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : ''}
                    parser={value => value ? value.replace(/\$\s?|(,*)/g, '') : ''}
                  />
                </Form.Item>
              );
            } else {
              // Manager/Accountant: show gross and net salary
              return (
                <>
                  <Form.Item name="grossSalary" label="L∆∞∆°ng GROSS">
                    <InputNumber
                      style={{ 
                        width: '100%',
                        backgroundColor: '#f0f8ff', 
                        border: '1px solid #52c41a',
                        color: '#52c41a',
                        fontWeight: 'bold'
                      }}
                      placeholder="L∆∞∆°ng GROSS cho Manager/K·∫ø to√°n"
                      readOnly
                      formatter={value => value ? `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : ''}
                      parser={value => value ? value.replace(/\$\s?|(,*)/g, '') : ''}
                    />
                  </Form.Item>

                  <Form.Item name="netSalary" label="L∆∞∆°ng NET">
                    <InputNumber
                      style={{ 
                        width: '100%',
                        backgroundColor: '#f0f8ff', 
                        border: '1px solid #52c41a',
                        color: '#52c41a',
                        fontWeight: 'bold'
                      }}
                      placeholder="L∆∞∆°ng NET cho Manager/K·∫ø to√°n"
                      readOnly
                      formatter={value => value ? `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : ''}
                      parser={value => value ? value.replace(/\$\s?|(,*)/g, '') : ''}
                    />
                  </Form.Item>
                </>
              );
            }
          })()}

          <Form.Item name="startDate" label="Ng√†y b·∫Øt ƒë·∫ßu" rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu!' }]}>
            <DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" />
          </Form.Item>

          <Form.Item name="endDate" label="Ng√†y k·∫øt th√∫c">
            <DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" />
          </Form.Item>

          <Form.Item name="contractTerms" label="ƒêi·ªÅu kho·∫£n h·ª£p ƒë·ªìng">
            <TextArea rows={4} placeholder="Nh·∫≠p ƒëi·ªÅu kho·∫£n h·ª£p ƒë·ªìng" />
          </Form.Item>

          <Form.Item>
            <Space>
              <Button type="primary" htmlType="submit">
                T·∫°o h·ª£p ƒë·ªìng
              </Button>
              <Button onClick={() => {
                setCandidateModalVisible(false);
                setSelectedCandidate(null);
                candidateForm.resetFields();
              }}>
                H·ªßy
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>

      {/* Modal gia h·∫°n h·ª£p ƒë·ªìng */}
      <Modal
        title="Gia h·∫°n h·ª£p ƒë·ªìng"
        visible={renewModalVisible}
        onCancel={() => {
          setRenewModalVisible(false);
          setRenewingContract(null);
          renewForm.resetFields();
        }}
        footer={null}
        width={600}
      >
        <Form
          form={renewForm}
          layout="vertical"
          onFinish={handleRenewContractSubmit}
        >
          <Form.Item name="contractId" label="ID H·ª£p ƒë·ªìng">
            <Input 
              readOnly 
              style={{ 
                backgroundColor: '#f0f8ff', 
                border: '1px solid #1890ff',
                color: '#1890ff',
                fontWeight: 'bold'
              }} 
            />
          </Form.Item>

          <Form.Item name="fullName" label="H·ªç v√† t√™n">
            <Input 
              readOnly 
              style={{ backgroundColor: '#f5f5f5' }} 
            />
          </Form.Item>

          <Form.Item 
            name="startDate" 
            label="Ng√†y b·∫Øt ƒë·∫ßu m·ªõi" 
            rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu!' }]}
          >
            <DatePicker 
              style={{ width: '100%' }} 
              format="DD/MM/YYYY" 
              placeholder="Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu m·ªõi"
            />
          </Form.Item>

          <Form.Item 
            name="endDate" 
            label="Ng√†y k·∫øt th√∫c m·ªõi" 
            rules={[
              { required: true, message: 'Vui l√≤ng ch·ªçn ng√†y k·∫øt th√∫c!' },
              ({ getFieldValue }) => ({
                validator(_, value) {
                  if (!value || !getFieldValue('startDate')) {
                    return Promise.resolve();
                  }
                  if (value.isBefore(getFieldValue('startDate'), 'day')) {
                    return Promise.reject(new Error('Ng√†y k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c tr∆∞·ªõc ng√†y b·∫Øt ƒë·∫ßu!'));
                  }
                  return Promise.resolve();
                },
              }),
            ]}
          >
            <DatePicker 
              style={{ width: '100%' }} 
              format="DD/MM/YYYY" 
              placeholder="Ch·ªçn ng√†y k·∫øt th√∫c m·ªõi"
            />
          </Form.Item>

          <div style={{ 
            backgroundColor: '#fff7e6', 
            border: '1px solid #ffd591', 
            borderRadius: '6px', 
            padding: '12px', 
            marginBottom: '16px' 
          }}>
            <p style={{ margin: 0, color: '#fa8c16' }}>
              <strong>L∆∞u √Ω:</strong> Ch·ªâ c√≥ th·ªÉ thay ƒë·ªïi ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y k·∫øt th√∫c. 
              C√°c th√¥ng tin kh√°c c·ªßa h·ª£p ƒë·ªìng s·∫Ω ƒë∆∞·ª£c gi·ªØ nguy√™n.
            </p>
          </div>

          <Form.Item>
            <Space>
              <Button type="primary" htmlType="submit">
                Gia h·∫°n h·ª£p ƒë·ªìng
              </Button>
              <Button onClick={() => {
                setRenewModalVisible(false);
                setRenewingContract(null);
                renewForm.resetFields();
              }}>
                H·ªßy
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default ContractManagement;