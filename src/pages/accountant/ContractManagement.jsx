import React, { useState, useEffect } from 'react';
import { 
  Card, 
  Tabs, 
  Table, 
  Button, 
  Space, 
  message, 
  Modal, 
  Form, 
  Input, 
  Select, 
  DatePicker, 
  InputNumber,
  Tag,
  Popconfirm,
  Tooltip
} from 'antd';
import { 
  PlusOutlined, 
  EditOutlined, 
  DeleteOutlined, 
  EyeOutlined,
  UserOutlined,
  TeamOutlined,
  FilePdfOutlined
} from '@ant-design/icons';
import axiosInstance from '../../config/axiosInstance';
import moment from 'moment';
import './ContractManagement.css';
import WorkingScheduleFields from '../../components/WorkingScheduleFields';
import ContractPDFGenerator from '../../utils/ContractPDFGenerator';

const { TabPane } = Tabs;
const { Option } = Select;
const { TextArea } = Input;

const ContractManagement = () => {
  const [teacherContracts, setTeacherContracts] = useState([]);
  const [staffContracts, setStaffContracts] = useState([]);
  const [candidatesReady, setCandidatesReady] = useState([]);
  const [loading, setLoading] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [candidateModalVisible, setCandidateModalVisible] = useState(false);
  const [editingContract, setEditingContract] = useState(null);
  const [selectedCandidate, setSelectedCandidate] = useState(null);
  const [candidatePosition, setCandidatePosition] = useState('');
  const [form] = Form.useForm();
  const [candidateForm] = Form.useForm();

  // Fetch data khi component mount
  useEffect(() => {
    fetchContracts();
    fetchCandidatesReady();
  }, []);

  // L·∫•y danh s√°ch h·ª£p ƒë·ªìng theo lo·∫°i
  const fetchContracts = async () => {
    setLoading(true);
    try {
      const [teacherResponse, staffResponse] = await Promise.all([
        axiosInstance.get('/contracts/type/TEACHER'),
        axiosInstance.get('/contracts/type/STAFF')
      ]);
      
      setTeacherContracts(teacherResponse.data);
      setStaffContracts(staffResponse.data);
    } catch (error) {
      console.error('Error fetching contracts:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch h·ª£p ƒë·ªìng!');
    } finally {
      setLoading(false);
    }
  };

  // L·∫•y danh s√°ch ·ª©ng vi√™n ƒë√£ ƒë∆∞·ª£c duy·ªát
  const fetchCandidatesReady = async () => {
    try {
      const response = await axiosInstance.get('/contracts/candidates/ready');
      setCandidatesReady(response.data);
    } catch (error) {
      console.error('Error fetching candidates:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ·ª©ng vi√™n ƒë√£ ƒë∆∞·ª£c duy·ªát!');
    }
  };

  // üîÑ REWRITTEN: X·ª≠ l√Ω t·∫°o h·ª£p ƒë·ªìng m·ªõi v·ªõi l∆∞∆°ng theo gi·ªù t·ª´ Qu·∫£n L√Ω Offer
  const handleCreateContract = async (values) => {
    console.log('üîÑ REWRITTEN: Creating contract with values:', values);
    
    // Validate required fields
    if (!values.fullName || values.fullName.trim() === '') {
      message.error('Vui l√≤ng nh·∫≠p h·ªç t√™n!');
      return;
    }
    if (!values.email || values.email.trim() === '') {
      message.error('Vui l√≤ng nh·∫≠p email!');
      return;
    }
    if (!values.position || values.position.trim() === '') {
      message.error('Vui l√≤ng nh·∫≠p v·ªã tr√≠ c√¥ng vi·ªác!');
      return;
    }
    if (!values.startDate) {
      message.error('Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu!');
      return;
    }
    if (values.endDate && values.endDate.isBefore(values.startDate, 'day')) {
      message.error('Ng√†y k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c tr∆∞·ªõc ng√†y b·∫Øt ƒë·∫ßu!');
      return;
    }
    if (values.endDate && values.endDate.isBefore(moment(), 'day')) {
      message.error('Ng√†y k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c l√† ng√†y trong qu√° kh·ª©!');
      return;
    }
    
    try {
      // Generate userId if not provided (for manual contract creation)
      let userId = values.userId;
      if (!userId && selectedCandidate) {
        userId = selectedCandidate.userId || selectedCandidate.id;
      }
      if (!userId) {
        // Generate a temporary userId for manual contracts
        userId = Date.now(); // Simple timestamp-based ID
      }

      // üîÑ REWRITTEN: Determine contract type and validate salary based on position
      const position = values.position || '';
      const isTeacher = position.toLowerCase().includes('gi√°o vi√™n') || 
                       position.toLowerCase().includes('teacher') || 
                       values.contractType === 'TEACHER';
      
      const contractType = isTeacher ? 'TEACHER' : 'STAFF';
      
      console.log('üîÑ REWRITTEN: Contract type determination:', {
        position,
        isTeacher,
        contractType,
        hourlySalary: values.hourlySalary,
        grossSalary: values.grossSalary,
        netSalary: values.netSalary
      });

      // üîÑ REWRITTEN: Validate salary based on contract type
      let salary = 0;
      if (isTeacher) {
        // ‚úÖ FOR TEACHERS: Validate hourly salary from Offer Management
        if (!values.hourlySalary || values.hourlySalary <= 0) {
          message.error('Vui l√≤ng nh·∫≠p l∆∞∆°ng theo gi·ªù h·ª£p l·ªá cho gi√°o vi√™n!');
          return;
        }
        salary = values.hourlySalary;
        console.log('üéì TEACHER: Using hourly salary:', salary, 'VND/hour');
        
      } else {
        // ‚úÖ FOR STAFF: Validate gross salary
        if (!values.grossSalary || values.grossSalary <= 0) {
          message.error('Vui l√≤ng nh·∫≠p l∆∞∆°ng gross h·ª£p l·ªá cho nh√¢n vi√™n!');
          return;
        }
        salary = values.grossSalary;
        console.log('üë• STAFF: Using gross salary:', salary, 'VND');
      }

      // üîÑ REWRITTEN: Contract data structure with proper salary field handling
      const contractData = {
        userId: userId,
        contractId: values.contractId || generateContractId(),
        fullName: values.fullName || '',
        email: values.email || '',
        phoneNumber: values.phoneNumber || '',
        contractType: contractType,
        position: values.position || '',
        department: values.department || 'Kh√¥ng x√°c ƒë·ªãnh',
        salary: salary, // Main salary field for compatibility
        workingHours: values.workingHours || '8h/ng√†y',
        startDate: values.startDate ? values.startDate.format('YYYY-MM-DD') : null,
        endDate: values.endDate ? values.endDate.format('YYYY-MM-DD') : null,
        status: 'ACTIVE',
        contractTerms: values.contractTerms || '',
        createdBy: 'Accountant',
        // Custom fields
        birthDate: values.birthDate ? values.birthDate.format('YYYY-MM-DD') : null,
        citizenId: values.cccd || values.citizenId || '',
        address: values.address || '',
        qualification: values.qualification || '',
        subject: values.subject || '',
        classLevel: values.classLevel || values.level || '', // Changed from educationLevel to classLevel (L·ªõp h·ªçc)
        // üîÑ REWRITTEN: Updated field names and added working schedule
        comments: values.comments || '', // Changed from evaluation to comments (Nh·∫≠n x√©t)
        workSchedule: values.workSchedule || '', // New field: Th·ªùi gian l√†m vi·ªác
        workShifts: Array.isArray(values.workShifts) ? values.workShifts.join(',') : (values.workShifts || ''), // Convert array to comma-separated string
        workDays: Array.isArray(values.workDays) ? values.workDays.join(',') : (values.workDays || ''), // Convert array to comma-separated string
        // ‚úÖ FOR TEACHERS: Only send hourly salary from Offer Management
        grossSalary: isTeacher ? null : (values.grossSalary || null),
        netSalary: isTeacher ? null : (values.netSalary || null),
        hourlySalary: isTeacher ? (values.hourlySalary || null) : null,
        offer: values.offer || ''
      };

      console.log('üîÑ REWRITTEN: Contract data being sent to backend:', contractData);
      console.log('üîÑ REWRITTEN: Salary field breakdown:', {
        isTeacher,
        salary: contractData.salary,
        hourlySalary: contractData.hourlySalary,
        grossSalary: contractData.grossSalary,
        netSalary: contractData.netSalary
      });

      await axiosInstance.post('/contracts', contractData);
      message.success('T·∫°o h·ª£p ƒë·ªìng th√†nh c√¥ng!');
      setModalVisible(false);
      setCandidateModalVisible(false);
      form.resetFields();
      candidateForm.resetFields();
      setSelectedCandidate(null);
      fetchContracts();
      fetchCandidatesReady();
    } catch (error) {
      console.error('‚ùå Error creating contract:', error);
      console.error('‚ùå Error response:', error.response?.data);
      console.error('‚ùå Error status:', error.response?.status);
      console.error('‚ùå Full error object:', JSON.stringify(error.response?.data, null, 2));
      
      // More detailed error message
      let errorMessage = 'An unexpected error occurred';
      if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.response?.data?.error) {
        errorMessage = error.response.data.error;
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      message.error(`Kh√¥ng th·ªÉ t·∫°o h·ª£p ƒë·ªìng! ${errorMessage}`);
    }
  };

  // X·ª≠ l√Ω c·∫≠p nh·∫≠t h·ª£p ƒë·ªìng
  const handleUpdateContract = async (values) => {
    if (values.endDate && values.endDate.isBefore(values.startDate, 'day')) {
      message.error('Ng√†y k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c tr∆∞·ªõc ng√†y b·∫Øt ƒë·∫ßu!');
      return;
    }
    try {
      const contractData = {
        ...values,
        startDate: values.startDate ? values.startDate.format('YYYY-MM-DD') : null,
        endDate: values.endDate ? values.endDate.format('YYYY-MM-DD') : null,
        birthDate: values.birthDate ? values.birthDate.format('YYYY-MM-DD') : null,
        citizenId: values.cccd || values.citizenId || '',
        // Format working schedule fields for backend
        workShifts: Array.isArray(values.workShifts) ? values.workShifts.join(',') : (values.workShifts || ''),
        workDays: Array.isArray(values.workDays) ? values.workDays.join(',') : (values.workDays || ''),
        workSchedule: values.workSchedule || ''
      };

      await axiosInstance.put(`/contracts/${editingContract.id}`, contractData);
      message.success('C·∫≠p nh·∫≠t h·ª£p ƒë·ªìng th√†nh c√¥ng!');
      setModalVisible(false);
      setEditingContract(null);
      form.resetFields();
      fetchContracts();
    } catch (error) {
      console.error('Error updating contract:', error);
      message.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t h·ª£p ƒë·ªìng!');
    }
  };

  // X·ª≠ l√Ω x√≥a h·ª£p ƒë·ªìng
  const handleDeleteContract = async (id) => {
    try {
      await axiosInstance.delete(`/contracts/${id}`);
      message.success('X√≥a h·ª£p ƒë·ªìng th√†nh c√¥ng!');
      fetchContracts();
    } catch (error) {
      console.error('Error deleting contract:', error);
      message.error('Kh√¥ng th·ªÉ x√≥a h·ª£p ƒë·ªìng!');
    }
  };

  // X·ª≠ l√Ω ch·ªânh s·ª≠a h·ª£p ƒë·ªìng
  const handleEditContract = (record) => {
    console.log('üîç DEBUG: Editing contract:', record);
    console.log('üîç DEBUG: Contract salary fields:', {
      grossSalary: record.grossSalary,
      netSalary: record.netSalary,
      hourlySalary: record.hourlySalary,
      salary: record.salary
    });

    setEditingContract(record);
    
    // Populate form with contract data
    const formData = {
      contractId: record.contractId,
      fullName: record.fullName,
      email: record.email,
      phoneNumber: record.phoneNumber,
      position: record.position,
      // Populate salary fields from contract data (read-only)
      grossSalary: record.grossSalary,
      netSalary: record.netSalary,
      hourlySalary: record.hourlySalary,
      startDate: record.startDate ? moment(record.startDate) : null,
      endDate: record.endDate ? moment(record.endDate) : null,
      status: record.status,
      contractTerms: record.contractTerms,
      birthDate: record.birthDate ? moment(record.birthDate) : null,
      cccd: record.citizenId,
      address: record.address,
      qualification: record.qualification,
      subject: record.subject,
      classLevel: record.classLevel || record.educationLevel, // Changed from level to classLevel (L·ªõp h·ªçc)
      // New working schedule fields
      comments: record.comments, // Changed from evaluation to comments (Nh·∫≠n x√©t)
      workSchedule: record.workSchedule, // Th·ªùi gian l√†m vi·ªác
      workShifts: record.workShifts ? (typeof record.workShifts === 'string' ? record.workShifts.split(',') : record.workShifts) : [], // Convert comma-separated string to array
      workDays: record.workDays ? (typeof record.workDays === 'string' ? record.workDays.split(',') : record.workDays) : [] // Convert comma-separated string to array
    };

    console.log('üîç DEBUG: Form data for edit:', formData);
    form.setFieldsValue(formData);
    setModalVisible(true);
  };

  // Generate Contract ID based on current date and sequence
  const generateContractId = () => {
    const today = new Date();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const year = String(today.getFullYear()).slice(-2);
    // For demo purposes, we'll use a simple sequence. In production, this should come from backend
    const sequence = String(Math.floor(Math.random() * 99) + 1).padStart(2, '0');
    return `${sequence}${month}${year}`;
  };

  // üîÑ REWRITTEN: M·ªü modal t·∫°o h·ª£p ƒë·ªìng t·ª´ ·ª©ng vi√™n ƒë√£ duy·ªát v·ªõi l∆∞∆°ng theo gi·ªù t·ª´ Qu·∫£n L√Ω Offer
  const handleSelectCandidate = async (candidate) => {
    console.log('üîÑ REWRITTEN: Creating contract for approved candidate:', candidate);
    setSelectedCandidate(candidate);
    const contractId = generateContractId();
    
    // X√°c ƒë·ªãnh lo·∫°i v·ªã tr√≠ ƒë·ªÉ x·ª≠ l√Ω l∆∞∆°ng ph√π h·ª£p
    const position = candidate.position || candidate.jobTitle || candidate.role || '';
    const contractType = candidate.contractType || '';
    const isTeacher = position.toLowerCase().includes('gi√°o vi√™n') || 
                     position.toLowerCase().includes('teacher') || 
                     contractType === 'TEACHER';
    
    console.log('üîç REWRITTEN DEBUG: Candidate analysis:', {
      position,
      contractType,
      isTeacher,
      candidateId: candidate.userId || candidate.id
    });
    
    // Set effective position for UI logic
    const effectivePosition = isTeacher ? 'gi√°o vi√™n' : position;
    setCandidatePosition(effectivePosition);
    
    // Set basic candidate information
    candidateForm.setFieldsValue({
      contractId: contractId,
      fullName: candidate.fullName || '',
      email: candidate.email || '',
      phoneNumber: candidate.phoneNumber || '',
      position: position,
      startDate: '',
      endDate: '',
      status: 'ACTIVE',
      contractTerms: ''
    });
    
    // üîÑ REWRITTEN: Fetch offer data with focus on hourly salary for teachers
    try {
      const candidateId = candidate.userId || candidate.id || 1;
      console.log('üîÑ REWRITTEN: Fetching offer data from editable Offer Management for candidate ID:', candidateId);
      
      const offerResponse = await axiosInstance.get(`/contracts/candidates/${candidateId}/offer`);
      const offerData = offerResponse.data;
      
      console.log('üîÑ REWRITTEN: Received offer data from backend:', offerData);
      console.log('üîÑ REWRITTEN: Salary breakdown - Hourly:', offerData.hourlySalary, 'Gross:', offerData.grossSalary, 'Net:', offerData.netSalary);
      
      // üîÑ REWRITTEN: Process salary data based on position type
      const formValues = {
        comments: offerData.comments || 'Ch∆∞a c√≥ nh·∫≠n x√©t' // Changed from evaluation to comments
      };
      
      if (isTeacher) {
        // ‚úÖ FOR TEACHERS: Only use hourly salary from editable Offer Management
        console.log('üéì REWRITTEN TEACHER: Using hourly salary from editable Offer Management');
        
        if (offerData.hourlySalary && offerData.hourlySalary > 0) {
          formValues.hourlySalary = offerData.hourlySalary;
          console.log('‚úÖ TEACHER: Set hourly salary from Offer Management:', offerData.hourlySalary, 'VND/hour');
        } else {
          formValues.hourlySalary = 100000; // Default 100k VND/hour
          console.log('‚ö†Ô∏è TEACHER: Using default hourly salary: 100,000 VND/hour');
        }
        
        // Don't set gross/net salary for teachers
        formValues.grossSalary = null;
        formValues.netSalary = null;
        
      } else {
        // ‚úÖ FOR STAFF: Use gross and net salary
        console.log('üë• REWRITTEN STAFF: Using gross and net salary from Offer Management');
        
        formValues.grossSalary = offerData.grossSalary || 15000000; // Default 15M VND
        formValues.netSalary = offerData.netSalary || 12000000;     // Default 12M VND
        formValues.hourlySalary = null; // Don't set hourly salary for staff
        
        console.log('‚úÖ STAFF: Set gross salary:', formValues.grossSalary, 'VND, net salary:', formValues.netSalary, 'VND');
      }
      
      console.log('üîÑ REWRITTEN: Final form values for contract creation:', formValues);
      candidateForm.setFieldsValue(formValues);
      
      message.success(`‚úÖ ƒê√£ t·∫£i th√¥ng tin l∆∞∆°ng t·ª´ Qu·∫£n L√Ω Offer ${isTeacher ? '(L∆∞∆°ng theo gi·ªù)' : '(L∆∞∆°ng gross/net)'}`);
      
    } catch (error) {
      console.error('üîÑ REWRITTEN ERROR: Failed to fetch offer data:', error);
      message.error('‚ùå Kh√¥ng th·ªÉ t·∫£i th√¥ng tin l∆∞∆°ng t·ª´ Qu·∫£n L√Ω Offer!');
      
      // Set appropriate default values based on position
      const defaultValues = {
        comments: 'Ch∆∞a c√≥ nh·∫≠n x√©t' // Changed from evaluation to comments
      };
      
      if (isTeacher) {
        defaultValues.hourlySalary = 100000; // 100k VND/hour for teachers
        defaultValues.grossSalary = null;
        defaultValues.netSalary = null;
      } else {
        defaultValues.grossSalary = 15000000; // 15M VND for staff
        defaultValues.netSalary = 12000000;   // 12M VND for staff
        defaultValues.hourlySalary = null;
      }
      
      candidateForm.setFieldsValue(defaultValues);
    }
    
    setCandidateModalVisible(true);
  };

  // M·ªü modal t·∫°o h·ª£p ƒë·ªìng th·ªß c√¥ng
  const handleCreateManualContract = () => {
    const contractId = generateContractId();
    form.setFieldsValue({
      contractId: contractId
    });
    setModalVisible(true);
  };



  // H√†m validate ng√†y sinh (√≠t nh·∫•t 20 tu·ªïi) - ƒê√£ b·ªè validate tu·ªïi theo y√™u c·∫ßu
  const validateBirthDate = (_, value) => {
    if (!value) {
      return Promise.reject(new Error('Vui l√≤ng ch·ªçn ng√†y sinh'));
    }
    return Promise.resolve();
  };

  // Xem h·ª£p ƒë·ªìng d∆∞·ªõi d·∫°ng PDF
  const handleViewContractPDF = (contract) => {
    try {
      ContractPDFGenerator.generateContractPDF(contract);
    } catch (error) {
      console.error('Error generating PDF:', error);
      message.error('Kh√¥ng th·ªÉ t·∫°o file PDF h·ª£p ƒë·ªìng!');
    }
  };

  // C·∫•u h√¨nh c·ªôt cho b·∫£ng h·ª£p ƒë·ªìng
  const contractColumns = [
    {
      title: 'ID H·ª£p ƒë·ªìng',
      dataIndex: 'contractId',
      key: 'contractId',
      width: 120,
      render: (text) => <strong style={{ color: '#1890ff' }}>{text}</strong>
    },
    {
      title: 'H·ªç t√™n',
      dataIndex: 'fullName',
      key: 'fullName',
      render: (text) => <strong>{text}</strong>
    },

    {
      title: 'Email',
      dataIndex: 'email',
      key: 'email'
    },
    {
      title: 'S·ªë ƒëi·ªán tho·∫°i',
      dataIndex: 'phoneNumber',
      key: 'phoneNumber'
    },
    {
      title: 'V·ªã tr√≠',
      dataIndex: 'position',
      key: 'position'
    },

    {
      title: 'L∆∞∆°ng',
      dataIndex: 'salary',
      key: 'salary',
      render: (salary) => salary ? `${salary.toLocaleString()} VNƒê` : 'Ch∆∞a x√°c ƒë·ªãnh'
    },
    {
      title: 'Ng√†y b·∫Øt ƒë·∫ßu',
      dataIndex: 'startDate',
      key: 'startDate',
      render: (date) => date ? moment(date).format('DD/MM/YYYY') : 'N/A'
    },
    {
      title: 'Tr·∫°ng th√°i',
      dataIndex: 'status',
      key: 'status',
      render: (status) => {
        let color, text;
        switch (status) {
          case 'ACTIVE':
            color = 'green';
            text = 'ƒêang ho·∫°t ƒë·ªông';
            break;
          case 'NEAR_EXPIRY':
            color = 'orange';
            text = 'G·∫ßn h·∫øt h·∫°n h·ª£p ƒë·ªìng';
            break;
          case 'EXPIRED':
            color = 'red';
            text = 'H·∫øt h·∫°n h·ª£p ƒë·ªìng';
            break;
          case 'TERMINATED':
            color = 'volcano';
            text = 'ƒê√£ ch·∫•m d·ª©t';
            break;
          default:
            color = 'default';
            text = status;
        }
        return <Tag color={color}>{text}</Tag>;
      }
    },
    {
      title: 'Thao t√°c',
      key: 'actions',
      render: (_, record) => (
        <Space>
          <Tooltip title="Xem h·ª£p ƒë·ªìng PDF">
            <Button 
              icon={<FilePdfOutlined />} 
              size="small" 
              onClick={() => handleViewContractPDF(record)}
              style={{ color: '#1890ff' }}
            />
          </Tooltip>
          <Tooltip title="Ch·ªânh s·ª≠a">
            <Button 
              icon={<EditOutlined />} 
              size="small" 
              onClick={() => handleEditContract(record)}
            />
          </Tooltip>
          <Popconfirm
            title="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a h·ª£p ƒë·ªìng n√†y?"
            onConfirm={() => handleDeleteContract(record.id)}
            okText="C√≥"
            cancelText="Kh√¥ng"
          >
            <Tooltip title="X√≥a">
              <Button icon={<DeleteOutlined />} size="small" danger />
            </Tooltip>
          </Popconfirm>
        </Space>
      )
    }
  ];

  // C·∫•u h√¨nh c·ªôt cho b·∫£ng ·ª©ng vi√™n ƒë√£ duy·ªát
  const candidateColumns = [
    {
      title: 'H·ªç t√™n',
      dataIndex: 'fullName',
      key: 'fullName',
      render: (text) => <strong>{text}</strong>
    },
    {
      title: 'Email',
      dataIndex: 'email',
      key: 'email'
    },
    {
      title: 'S·ªë ƒëi·ªán tho·∫°i',
      dataIndex: 'phoneNumber',
      key: 'phoneNumber'
    },
    {
      title: 'V·ªã tr√≠ ·ª©ng tuy·ªÉn',
      dataIndex: 'position',
      key: 'position'
    },
    {
      title: 'Lo·∫°i h·ª£p ƒë·ªìng',
      dataIndex: 'contractType',
      key: 'contractType',
      render: (type) => (
        <Tag color={type === 'TEACHER' ? 'blue' : 'green'}>
          {type === 'TEACHER' ? 'Gi√°o vi√™n' : 'Nh√¢n vi√™n'}
        </Tag>
      )
    },
    {
      title: 'Thao t√°c',
      key: 'actions',
      render: (_, record) => (
        <Button 
          type="primary" 
          icon={<PlusOutlined />}
          onClick={() => handleSelectCandidate(record)}
        >
          T·∫°o h·ª£p ƒë·ªìng
        </Button>
      )
    }
  ];

  return (
    <div className="contract-management">
      <Card title="Qu·∫£n l√Ω H·ª£p ƒë·ªìng" className="contract-card">
        <div style={{ marginBottom: 16, textAlign: 'right' }}>
          <Button 
            type="primary" 
            icon={<PlusOutlined />}
            onClick={handleCreateManualContract}
            size="large"
          >
            T·∫°o h·ª£p ƒë·ªìng th·ªß c√¥ng
          </Button>
        </div>
        <Tabs defaultActiveKey="teachers" className="contract-tabs">
          <TabPane 
            tab={<span><UserOutlined /> H·ª£p ƒë·ªìng Gi√°o vi√™n ({teacherContracts.length})</span>} 
            key="teachers"
          >
            <Table
              columns={contractColumns}
              dataSource={teacherContracts}
              rowKey="id"
              loading={loading}
              pagination={{ 
                pageSize: 10, 
                showSizeChanger: true, 
                showTotal: (total) => `T·ªïng ${total} h·ª£p ƒë·ªìng` 
              }}
            />
          </TabPane>

          <TabPane 
            tab={<span><TeamOutlined /> H·ª£p ƒë·ªìng Nh√¢n vi√™n ({staffContracts.length})</span>} 
            key="staff"
          >
            <Table
              columns={contractColumns}
              dataSource={staffContracts}
              rowKey="id"
              loading={loading}
              pagination={{ 
                pageSize: 10, 
                showSizeChanger: true, 
                showTotal: (total) => `T·ªïng ${total} h·ª£p ƒë·ªìng` 
              }}
            />
          </TabPane>

          <TabPane 
            tab={<span><PlusOutlined /> T·∫°o h·ª£p ƒë·ªìng t·ª´ ·ª©ng vi√™n ƒë√£ duy·ªát ({candidatesReady.length})</span>} 
            key="create"
          >
            <Card title="Danh s√°ch ·ª©ng vi√™n ƒë√£ ƒë∆∞·ª£c duy·ªát" className="candidates-card">
              <Table
                columns={candidateColumns}
                dataSource={candidatesReady}
                rowKey="email"
                pagination={{ 
                  pageSize: 10, 
                  showTotal: (total) => `T·ªïng ${total} ·ª©ng vi√™n` 
                }}
              />
            </Card>
          </TabPane>
        </Tabs>
      </Card>

      {/* Modal t·∫°o/ch·ªânh s·ª≠a h·ª£p ƒë·ªìng th·ªß c√¥ng */}
      <Modal
        title={editingContract ? "Ch·ªânh s·ª≠a h·ª£p ƒë·ªìng" : "T·∫°o h·ª£p ƒë·ªìng m·ªõi"}
        visible={modalVisible}
        onCancel={() => {
          setModalVisible(false);
          setEditingContract(null);
          form.resetFields();
        }}
        footer={null}
        width={800}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={editingContract ? handleUpdateContract : handleCreateContract}
        >
          <Form.Item name="contractId" label="ID H·ª£p ƒë·ªìng">
            <Input 
              placeholder="T·ª± ƒë·ªông t·∫°o" 
              readOnly 
              style={{ 
                backgroundColor: '#f0f8ff', 
                border: '1px solid #1890ff',
                color: '#1890ff',
                fontWeight: 'bold'
              }} 
            />
          </Form.Item>

          <Form.Item name="fullName" label="H·ªç v√† t√™n">
            <Input 
              placeholder="Nh·∫≠p h·ªç v√† t√™n" 
              readOnly={editingContract}
              style={editingContract ? {
                backgroundColor: '#f5f5f5',
                color: '#666',
                cursor: 'not-allowed'
              } : {}}
            />
          </Form.Item>

          <Form.Item 
            name="birthDate" 
            label="Ng√†y sinh" 
            rules={[
              { required: true, message: 'Vui l√≤ng ch·ªçn ng√†y sinh' },
              { validator: validateBirthDate }
            ]}
          > 
            <DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" placeholder="Ch·ªçn ng√†y sinh" />
          </Form.Item>

          <Form.Item name="email" label="Email" rules={[{ required: true, type: 'email', message: 'Vui l√≤ng nh·∫≠p email h·ª£p l·ªá!' }]}>
            <Input 
              placeholder="Nh·∫≠p email" 
              readOnly={editingContract}
              style={editingContract ? {
                backgroundColor: '#f5f5f5',
                color: '#666',
                cursor: 'not-allowed'
              } : {}}
            />
          </Form.Item>

          <Form.Item name="phoneNumber" label="S·ªë ƒëi·ªán tho·∫°i">
            <Input 
              placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" 
              readOnly={editingContract}
              style={editingContract ? {
                backgroundColor: '#f5f5f5',
                color: '#666',
                cursor: 'not-allowed'
              } : {}}
            />
          </Form.Item>

          <Form.Item name="cccd" label="S·ªë CCCD" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë CCCD!' }, { pattern: /^\d{12}$/, message: 'S·ªë CCCD ph·∫£i c√≥ ƒë√∫ng 12 ch·ªØ s·ªë!' }]}>
            <Input placeholder="Nh·∫≠p s·ªë CCCD (12 s·ªë)" maxLength={12} />
          </Form.Item>

          <Form.Item name="address" label="ƒê·ªãa ch·ªâ" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!' }]}>
            <Input placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ" />
          </Form.Item>

          <Form.Item name="qualification" label="Tr√¨nh ƒë·ªô chuy√™n m√¥n" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p tr√¨nh ƒë·ªô chuy√™n m√¥n!' }]}>
            <Input placeholder="Nh·∫≠p tr√¨nh ƒë·ªô chuy√™n m√¥n" />
          </Form.Item>

          {/* Subject and Class Level fields - Only for Teachers */}
          {(() => {
            // For edit mode, check the editing contract's type and position
            const isTeacher = editingContract ? 
              (editingContract.contractType === 'TEACHER' || 
               editingContract.position?.toLowerCase().includes('gi√°o vi√™n')) :
              (candidatePosition.toLowerCase().includes('gi√°o vi√™n') || 
               candidatePosition.toLowerCase().includes('teacher'));
            
            if (isTeacher) {
              return (
                <>
                  <Form.Item name="subject" label="M√¥n gi·∫£ng d·∫°y" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m√¥n gi·∫£ng d·∫°y!' }]}>
                    <Input placeholder="Nh·∫≠p m√¥n gi·∫£ng d·∫°y" />
                  </Form.Item>

                  <Form.Item name="classLevel" label="L·ªõp h·ªçc" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p l·ªõp h·ªçc!' }]}>
                    <Input placeholder="Nh·∫≠p l·ªõp h·ªçc" />
                  </Form.Item>
                </>
              );
            }
            return null; // Don't show for HR/Accountant staff
          })()}

          {/* Working Schedule Fields - Only for Teachers in Edit Mode */}
          {(() => {
            // For edit mode, check the editing contract's type and position
            const isTeacher = editingContract ? 
              (editingContract.contractType === 'TEACHER' || 
               editingContract.position?.toLowerCase().includes('gi√°o vi√™n')) :
              (candidatePosition.toLowerCase().includes('gi√°o vi√™n') || 
               candidatePosition.toLowerCase().includes('teacher'));
            
            if (isTeacher) {
              return (
                <>
                  <Form.Item 
                    name="workShifts" 
                    label="Ca l√†m vi·ªác" 
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ca l√†m vi·ªác!' }]}
                  >
                    <Select 
                      mode="multiple" 
                      placeholder="Ch·ªçn ca l√†m vi·ªác"
                      options={[
                        { value: 'morning', label: 'Ca s√°ng (7:30 - 9:30)' },
                        { value: 'afternoon', label: 'Ca chi·ªÅu (14:00 - 17:00)' },
                        { value: 'evening', label: 'Ca t·ªëi (17:00 - 21:00)' }
                      ]}
                    />
                  </Form.Item>

                  <Form.Item 
                    name="workDays" 
                    label="Ng√†y trong tu·∫ßn" 
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y l√†m vi·ªác!' }]}
                  >
                    <Select 
                      mode="multiple" 
                      placeholder="Ch·ªçn ng√†y trong tu·∫ßn"
                      options={[
                        { value: 'monday', label: 'Th·ª© 2' },
                        { value: 'tuesday', label: 'Th·ª© 3' },
                        { value: 'wednesday', label: 'Th·ª© 4' },
                        { value: 'thursday', label: 'Th·ª© 5' },
                        { value: 'friday', label: 'Th·ª© 6' },
                        { value: 'saturday', label: 'Th·ª© 7' },
                        { value: 'sunday', label: 'Ch·ªß nh·∫≠t' }
                      ]}
                    />
                  </Form.Item>

                  <Form.Item name="workSchedule" label="Th·ªùi gian l√†m vi·ªác chi ti·∫øt">
                    <Input.TextArea 
                      rows={3} 
                      placeholder="M√¥ t·∫£ chi ti·∫øt th·ªùi gian l√†m vi·ªác (v√≠ d·ª•: Th·ª© 2, 4, 6 - Ca s√°ng v√† chi·ªÅu)"
                    />
                  </Form.Item>
                </>
              );
            }
            return null; // Don't show for HR/Accountant staff
          })()}

          <Form.Item name="position" label="V·ªã tr√≠" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p v·ªã tr√≠!' }]}>
            <Input 
              placeholder="Nh·∫≠p v·ªã tr√≠" 
              readOnly={editingContract}
              style={editingContract ? {
                backgroundColor: '#f5f5f5',
                color: '#666',
                cursor: 'not-allowed'
              } : {}}
            />
          </Form.Item>

          {/* Salary fields - only show in edit mode and read-only, based on contract type */}
          {editingContract && (
            <>
              {/* For Teacher Contracts: Show only Hourly Salary */}
              {(editingContract.contractType === 'TEACHER' || 
                editingContract.position?.toLowerCase().includes('gi√°o vi√™n')) && 
                editingContract.hourlySalary && (
                <Form.Item name="hourlySalary" label="L∆∞∆°ng theo gi·ªù">
                  <InputNumber
                    style={{ 
                      width: '100%',
                      backgroundColor: '#f5f5f5',
                      color: '#666',
                      cursor: 'not-allowed'
                    }}
                    formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                    parser={value => value.replace(/\$\s?|(,*)/g, '')}
                    readOnly
                    disabled
                  />
                </Form.Item>
              )}
              
              {/* For Staff Contracts: Show Gross and Net Salary */}
              {(editingContract.contractType === 'STAFF' || 
                !editingContract.position?.toLowerCase().includes('gi√°o vi√™n')) && (
                <>
                  {editingContract.grossSalary && (
                    <Form.Item name="grossSalary" label="L∆∞∆°ng GROSS">
                      <InputNumber
                        style={{ 
                          width: '100%',
                          backgroundColor: '#f5f5f5',
                          color: '#666',
                          cursor: 'not-allowed'
                        }}
                        formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                        parser={value => value.replace(/\$\s?|(,*)/g, '')}
                        readOnly
                        disabled
                      />
                    </Form.Item>
                  )}
                  {editingContract.netSalary && (
                    <Form.Item name="netSalary" label="L∆∞∆°ng NET">
                      <InputNumber
                        style={{ 
                          width: '100%',
                          backgroundColor: '#f5f5f5',
                          color: '#666',
                          cursor: 'not-allowed'
                        }}
                        formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                        parser={value => value.replace(/\$\s?|(,*)/g, '')}
                        readOnly
                        disabled
                      />
                    </Form.Item>
                  )}
                </>
              )}
            </>
          )}

          <Form.Item name="startDate" label="Ng√†y b·∫Øt ƒë·∫ßu" rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu!' }]}>
            <DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" />
          </Form.Item>

          <Form.Item name="endDate" label="Ng√†y k·∫øt th√∫c">
            <DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" />
          </Form.Item>

          <Form.Item name="contractTerms" label="ƒêi·ªÅu kho·∫£n h·ª£p ƒë·ªìng">
            <TextArea rows={4} placeholder="Nh·∫≠p ƒëi·ªÅu kho·∫£n h·ª£p ƒë·ªìng" />
          </Form.Item>

          <Form.Item>
            <Space>
              <Button type="primary" htmlType="submit">
                {editingContract ? 'C·∫≠p nh·∫≠t' : 'T·∫°o h·ª£p ƒë·ªìng'}
              </Button>
              <Button onClick={() => {
                setModalVisible(false);
                setEditingContract(null);
                form.resetFields();
              }}>
                H·ªßy
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>

      {/* Modal t·∫°o h·ª£p ƒë·ªìng t·ª´ ·ª©ng vi√™n ƒë√£ duy·ªát */}
      <Modal
        title="T·∫°o h·ª£p ƒë·ªìng cho ·ª©ng vi√™n ƒë√£ duy·ªát"
        visible={candidateModalVisible}
        onCancel={() => {
          setCandidateModalVisible(false);
          setSelectedCandidate(null);
          candidateForm.resetFields();
        }}
        footer={null}
        width={800}
      >
        <Form
          form={candidateForm}
          layout="vertical"
          onFinish={handleCreateContract}
        >
          <Form.Item name="contractId" label="ID H·ª£p ƒë·ªìng">
            <Input 
              placeholder="T·ª± ƒë·ªông t·∫°o" 
              readOnly 
              style={{ 
                backgroundColor: '#f0f8ff', 
                border: '1px solid #1890ff',
                color: '#1890ff',
                fontWeight: 'bold'
              }} 
            />
          </Form.Item>

          <Form.Item name="fullName" label="H·ªç v√† t√™n">
            <Input placeholder="Nh·∫≠p h·ªç v√† t√™n" readOnly style={{ backgroundColor: '#f5f5f5' }} />
          </Form.Item>

          <Form.Item 
            name="birthDate" 
            label="Ng√†y sinh" 
            rules={[
              { required: true, message: 'Vui l√≤ng ch·ªçn ng√†y sinh' },
              { validator: validateBirthDate }
            ]}
          > 
            <DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" placeholder="Ch·ªçn ng√†y sinh" />
          </Form.Item>

          <Form.Item name="email" label="Email">
            <Input placeholder="Email" readOnly style={{ backgroundColor: '#f5f5f5' }} />
          </Form.Item>

          <Form.Item name="phoneNumber" label="S·ªë ƒëi·ªán tho·∫°i">
            <Input placeholder="S·ªë ƒëi·ªán tho·∫°i" readOnly style={{ backgroundColor: '#f5f5f5' }} />
          </Form.Item>

          <Form.Item name="cccd" label="S·ªë CCCD" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë CCCD!' }, { pattern: /^\d{12}$/, message: 'S·ªë CCCD ph·∫£i c√≥ ƒë√∫ng 12 ch·ªØ s·ªë!' }]}>
            <Input placeholder="Nh·∫≠p s·ªë CCCD (12 s·ªë)" maxLength={12} />
          </Form.Item>

          <Form.Item name="address" label="ƒê·ªãa ch·ªâ" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!' }]}>
            <Input placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ" />
          </Form.Item>

          <Form.Item name="qualification" label="Tr√¨nh ƒë·ªô chuy√™n m√¥n" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p tr√¨nh ƒë·ªô chuy√™n m√¥n!' }]}>
            <Input placeholder="Nh·∫≠p tr√¨nh ƒë·ªô chuy√™n m√¥n" />
          </Form.Item>

          {/* Subject and Class Level fields - Only for Teachers */}
          {(() => {
            const position = candidatePosition.toLowerCase();
            const isTeacher = position.includes('gi√°o vi√™n') || position.includes('teacher') || 
                             (selectedCandidate && selectedCandidate.contractType === 'TEACHER');
            
            if (isTeacher) {
              return (
                <>
                  <Form.Item name="subject" label="M√¥n gi·∫£ng d·∫°y" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m√¥n gi·∫£ng d·∫°y!' }]}>
                    <Input placeholder="Nh·∫≠p m√¥n gi·∫£ng d·∫°y" />
                  </Form.Item>

                  <Form.Item name="classLevel" label="L·ªõp h·ªçc" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p l·ªõp h·ªçc!' }]}>
                    <Input placeholder="Nh·∫≠p l·ªõp h·ªçc" />
                  </Form.Item>
                </>
              );
            }
            return null; // Don't show for HR/Accountant staff
          })()}

          {/* Working Schedule Fields - Only for Teachers */}
          {(() => {
            const position = candidatePosition.toLowerCase();
            const isTeacher = position.includes('gi√°o vi√™n') || position.includes('teacher') || 
                             (selectedCandidate && selectedCandidate.contractType === 'TEACHER');
            
            if (isTeacher) {
              return (
                <>
                  <Form.Item 
                    name="workShifts" 
                    label="Ca l√†m vi·ªác" 
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ca l√†m vi·ªác!' }]}
                  >
                    <Select 
                      mode="multiple" 
                      placeholder="Ch·ªçn ca l√†m vi·ªác"
                      options={[
                        { value: 'morning', label: 'Ca s√°ng (7:30 - 9:30)' },
                        { value: 'afternoon', label: 'Ca chi·ªÅu (14:00 - 17:00)' },
                        { value: 'evening', label: 'Ca t·ªëi (17:00 - 21:00)' }
                      ]}
                    />
                  </Form.Item>

                  <Form.Item 
                    name="workDays" 
                    label="Ng√†y trong tu·∫ßn" 
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y l√†m vi·ªác!' }]}
                  >
                    <Select 
                      mode="multiple" 
                      placeholder="Ch·ªçn ng√†y trong tu·∫ßn"
                      options={[
                        { value: 'monday', label: 'Th·ª© 2' },
                        { value: 'tuesday', label: 'Th·ª© 3' },
                        { value: 'wednesday', label: 'Th·ª© 4' },
                        { value: 'thursday', label: 'Th·ª© 5' },
                        { value: 'friday', label: 'Th·ª© 6' },
                        { value: 'saturday', label: 'Th·ª© 7' },
                        { value: 'sunday', label: 'Ch·ªß nh·∫≠t' }
                      ]}
                    />
                  </Form.Item>

                  <Form.Item name="workSchedule" label="Th·ªùi gian l√†m vi·ªác chi ti·∫øt">
                    <Input.TextArea 
                      rows={3} 
                      placeholder="M√¥ t·∫£ chi ti·∫øt th·ªùi gian l√†m vi·ªác (v√≠ d·ª•: Th·ª© 2, 4, 6 - Ca s√°ng v√† chi·ªÅu)"
                    />
                  </Form.Item>
                </>
              );
            }
            return null; // Don't show for HR/Accountant staff
          })()}

          <Form.Item name="position" label="V·ªã tr√≠">
            <Input placeholder="V·ªã tr√≠" readOnly style={{ backgroundColor: '#f5f5f5' }} />
          </Form.Item>

          {/* Offer Management Fields - Read Only */}
          <Form.Item name="comments" label="Nh·∫≠n x√©t">
            <Input 
              placeholder="T·ª± ƒë·ªông l·∫•y t·ª´ Offer" 
              readOnly 
              style={{ 
                backgroundColor: '#f0f8ff', 
                border: '1px solid #52c41a',
                color: '#52c41a',
                fontWeight: 'bold'
              }} 
            />
          </Form.Item>

          {/* Conditional rendering based on position */}
          {(() => {
            const position = candidatePosition.toLowerCase();
            // ‚úÖ FIX: More robust teacher detection
            const isTeacher = position.includes('gi√°o vi√™n') || position.includes('teacher') || 
                             (selectedCandidate && selectedCandidate.contractType === 'TEACHER');
            console.log('Teacher detection - position:', position, 'isTeacher:', isTeacher, 'contractType:', selectedCandidate?.contractType);
            
            if (isTeacher) {
              // Teachers: only show hourly salary
              return (
                <Form.Item name="hourlySalary" label="L∆∞∆°ng theo gi·ªù">
                  <InputNumber
                    style={{ 
                      width: '100%',
                      backgroundColor: '#f0f8ff', 
                      border: '1px solid #52c41a',
                      color: '#52c41a',
                      fontWeight: 'bold'
                    }}
                    placeholder="L∆∞∆°ng theo gi·ªù cho Gi√°o vi√™n"
                    readOnly
                    formatter={value => value ? `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : ''}
                    parser={value => value ? value.replace(/\$\s?|(,*)/g, '') : ''}
                  />
                </Form.Item>
              );
            } else {
              // Manager/Accountant: show gross and net salary
              return (
                <>
                  <Form.Item name="grossSalary" label="L∆∞∆°ng GROSS">
                    <InputNumber
                      style={{ 
                        width: '100%',
                        backgroundColor: '#f0f8ff', 
                        border: '1px solid #52c41a',
                        color: '#52c41a',
                        fontWeight: 'bold'
                      }}
                      placeholder="L∆∞∆°ng GROSS cho Manager/K·∫ø to√°n"
                      readOnly
                      formatter={value => value ? `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : ''}
                      parser={value => value ? value.replace(/\$\s?|(,*)/g, '') : ''}
                    />
                  </Form.Item>

                  <Form.Item name="netSalary" label="L∆∞∆°ng NET">
                    <InputNumber
                      style={{ 
                        width: '100%',
                        backgroundColor: '#f0f8ff', 
                        border: '1px solid #52c41a',
                        color: '#52c41a',
                        fontWeight: 'bold'
                      }}
                      placeholder="L∆∞∆°ng NET cho Manager/K·∫ø to√°n"
                      readOnly
                      formatter={value => value ? `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',') : ''}
                      parser={value => value ? value.replace(/\$\s?|(,*)/g, '') : ''}
                    />
                  </Form.Item>
                </>
              );
            }
          })()}

          <Form.Item name="startDate" label="Ng√†y b·∫Øt ƒë·∫ßu" rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu!' }]}>
            <DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" />
          </Form.Item>

          <Form.Item name="endDate" label="Ng√†y k·∫øt th√∫c">
            <DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" />
          </Form.Item>

          <Form.Item name="contractTerms" label="ƒêi·ªÅu kho·∫£n h·ª£p ƒë·ªìng">
            <TextArea rows={4} placeholder="Nh·∫≠p ƒëi·ªÅu kho·∫£n h·ª£p ƒë·ªìng" />
          </Form.Item>

          <Form.Item>
            <Space>
              <Button type="primary" htmlType="submit">
                T·∫°o h·ª£p ƒë·ªìng
              </Button>
              <Button onClick={() => {
                setCandidateModalVisible(false);
                setSelectedCandidate(null);
                candidateForm.resetFields();
              }}>
                H·ªßy
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default ContractManagement;